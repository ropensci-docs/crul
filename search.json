[{"path":[]},{"path":"https://docs.ropensci.org/crul/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page","code":""},{"path":"https://docs.ropensci.org/crul/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/<yourgithubusername>/crul.git Make sure track progress upstream (.e., version crul ropensci/crul) git remote add upstream https://github.com/ropensci/crul.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new feature branch) Please write test(s) changes affect code just docs Push account Submit pull request home base ropensci/crul","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Scott Chamberlain Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/crul/articles/async.html","id":"simple-async","dir":"Articles","previous_headings":"","what":"simple async","title":"3. async with crul","text":"Build request object 1 URLs Make request HTTP method get back list matching length number input URLs Access object variables methods just HttpClient results, just one time. apply access/method calls across many results, e.g., parse results","code":"(cc <- Async$new(   urls = c(     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?a=5&b=6',     'https://hb.opencpu.org/ip'   ) )) #> <crul async connection>  #>   curl options:  #>   proxies:  #>   auth:  #>   headers:  #>   urls: (n: 3) #>    https://hb.opencpu.org/get?a=5 #>    https://hb.opencpu.org/get?a=5&b=6 #>    https://hb.opencpu.org/ip (res <- cc$get()) #> async responses #> status code - url (N=3; printing up to 10) #>   200 - https://hb.opencpu.org/get?a=5 #>   200 - https://hb.opencpu.org/get?a=5&b=6 #>   200 - https://hb.opencpu.org/ip res[[1]]$url #> [1] \"https://hb.opencpu.org/get?a=5\" res[[1]]$success() #> [1] TRUE res[[1]]$parse(\"UTF-8\") #> [1] \"{\\n  \\\"args\\\": {\\n    \\\"a\\\": \\\"5\\\"\\n  }, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"R (4.2.3 aarch64-apple-darwin20 aarch64 darwin20)\\\"\\n  }, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/get?a=5\\\"\\n}\\n\" lapply(res, function(z) z$parse(\"UTF-8\")) #> [[1]] #> [1] \"{\\n  \\\"args\\\": {\\n    \\\"a\\\": \\\"5\\\"\\n  }, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"R (4.2.3 aarch64-apple-darwin20 aarch64 darwin20)\\\"\\n  }, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/get?a=5\\\"\\n}\\n\" #>  #> [[2]] #> [1] \"{\\n  \\\"args\\\": {\\n    \\\"a\\\": \\\"5\\\", \\n    \\\"b\\\": \\\"6\\\"\\n  }, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"R (4.2.3 aarch64-apple-darwin20 aarch64 darwin20)\\\"\\n  }, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/get?a=5&b=6\\\"\\n}\\n\" #>  #> [[3]] #> [1] \"{\\n  \\\"origin\\\": \\\"172.18.0.4\\\"\\n}\\n\""},{"path":"https://docs.ropensci.org/crul/articles/async.html","id":"varied-request-async","dir":"Articles","previous_headings":"","what":"varied request async","title":"3. async with crul","text":"Make requests asynchronously Parse results Status codes","code":"req1 <- HttpRequest$new(   url = \"https://hb.opencpu.org/get?a=5\",   opts = list(     verbose = TRUE   ) ) req1$get() #> <crul http request> get #>   url: https://hb.opencpu.org/get?a=5 #>   curl options:  #>     verbose: TRUE #>   proxies:  #>   auth:  #>   headers:  #>   progress: FALSE  req2 <- HttpRequest$new(   url = \"https://hb.opencpu.org/post?a=5&b=6\" ) req2$post(body = list(a = 5)) #> <crul http request> post #>   url: https://hb.opencpu.org/post?a=5&b=6 #>   curl options:  #>   proxies:  #>   auth:  #>   headers:  #>   progress: FALSE  (res <- AsyncVaried$new(req1, req2)) #> <crul async varied connection> #>   requests: (n: 2) #>    get: https://hb.opencpu.org/get?a=5  #>    post: https://hb.opencpu.org/post?a=5&b=6 res$request() res$parse() #> [1] \"{\\n  \\\"args\\\": {\\n    \\\"a\\\": \\\"5\\\"\\n  }, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"R (4.2.3 aarch64-apple-darwin20 aarch64 darwin20)\\\"\\n  }, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/get?a=5\\\"\\n}\\n\"                                                                                                                                                                                                                                                            #> [2] \"{\\n  \\\"args\\\": {\\n    \\\"a\\\": \\\"5\\\", \\n    \\\"b\\\": \\\"6\\\"\\n  }, \\n  \\\"data\\\": \\\"\\\", \\n  \\\"files\\\": {}, \\n  \\\"form\\\": {\\n    \\\"a\\\": \\\"5\\\"\\n  }, \\n  \\\"headers\\\": {\\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Content-Length\\\": \\\"137\\\", \\n    \\\"Content-Type\\\": \\\"multipart/form-data; boundary=------------------------389c6ab199efc7cd\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\\\"\\n  }, \\n  \\\"json\\\": null, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/post?a=5&b=6\\\"\\n}\\n\" lapply(res$parse(), jsonlite::prettify) #> [[1]] #> { #>     \"args\": { #>         \"a\": \"5\" #>     }, #>     \"headers\": { #>         \"Accept\": \"application/json, text/xml, application/xml, */*\", #>         \"Accept-Encoding\": \"gzip, deflate\", #>         \"Connection\": \"close\", #>         \"Host\": \"httpbin:8080\", #>         \"User-Agent\": \"R (4.2.3 aarch64-apple-darwin20 aarch64 darwin20)\" #>     }, #>     \"origin\": \"172.18.0.4\", #>     \"url\": \"http://httpbin:8080/get?a=5\" #> } #>   #>  #> [[2]] #> { #>     \"args\": { #>         \"a\": \"5\", #>         \"b\": \"6\" #>     }, #>     \"data\": \"\", #>     \"files\": { #>  #>     }, #>     \"form\": { #>         \"a\": \"5\" #>     }, #>     \"headers\": { #>         \"Accept\": \"application/json, text/xml, application/xml, */*\", #>         \"Accept-Encoding\": \"gzip, deflate\", #>         \"Connection\": \"close\", #>         \"Content-Length\": \"137\", #>         \"Content-Type\": \"multipart/form-data; boundary=------------------------389c6ab199efc7cd\", #>         \"Host\": \"httpbin:8080\", #>         \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\" #>     }, #>     \"json\": null, #>     \"origin\": \"172.18.0.4\", #>     \"url\": \"http://httpbin:8080/post?a=5&b=6\" #> } #> res$status_code() #> [1] 200 200"},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"importing-crul","dir":"Articles","previous_headings":"","what":"Importing crul","title":"5. API package best practices","text":"cases ’ll need import one thing crul: HttpClient. Add crul Imports DESCRIPTION file, add entry like @importFrom crul HttpClient somewhere package documentation, example:","code":"#' Some function #' #' @export #' @importFrom crul HttpClient #' ..."},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"http-request-function","dir":"Articles","previous_headings":"","what":"HTTP request function","title":"5. API package best practices","text":"one function needs make HTTP request ’s probably useful function HTTP requests. following example function. ’s features note function: url: really depends setup. cases base URL doesn’t change, can remove url parameter define url crul::HttpClient$new() call. path: likely hold anything base path args: named list query arguments. default list() means can use function pass args cases query args needed. ...: ’s called ellipsis. see example discussion . can use function like: used ellipsis, anyone can pass curl options like: Curl options important digging details HTTP requests, go long way towards users able sort problems, help diagnose problems well. Alternatively, can just HTTP request xGET function return response object - line line, another function, parse results needed.","code":"xGET <- function(url, path, args = list(), ...) {   cli <- crul::HttpClient$new(url, opts = list(...))   res <- cli$get(path = path, query = args)   res$raise_for_status()   res$raise_for_ct_json()   res$parse(\"UTF-8\") } x <- xGET(\"https://hb.opencpu.org\", \"get\", args = list(foo = \"bar\")) # parse the JSON to a list jsonlite::fromJSON(x) # more parsing xGET(\"https://xxx.org\", args = list(foo = \"bar\"), verbose = TRUE)"},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"failing-with-fauxpas","dir":"Articles","previous_headings":"","what":"Failing with fauxpas","title":"5. API package best practices","text":"fauxpas Suggests package. don’t installed, worries, installed, use fauxpas. much difference default raise_for_status() using fauxpas using . However, can construct replacement fauxpas gives flexibility deal HTTP status codes. First, make HTTP request: use fauxpas::find_error_class get correct R6 error class status code, case 404 can one two things: use $() $do_verbose(). $() simpler gives thing $raise_for_status() gives, allows change behavior (stop vs. warning vs. message), message formatted. default get: can change template using whisker templating $do_verbose() gives lot detail status code, possibly want: can change behavior either warning message:","code":"con <- HttpClient$new(\"https://hb.opencpu.org/status/404\") res <- con$get() x <- fauxpas::find_error_class(res$status_code)$new() #> <HTTPNotFound> #>  behavior: stop #>  message_template: {{reason}} (HTTP {{status}}) #>  message_template_verbose: {{reason}} (HTTP {{status}}).\\n - {{message}} x$do(res) #> Error: Not Found (HTTP 404) x$do(res, template = \"{{status}}\\n  --> {{reason}}\") #> Error: 404 #>  --> Not Found x$do_verbose(res) #> Error: Not Found (HTTP 404). #>  - The server has not found anything matching the Request-URI. No indication #>  is given of whether the condition is temporary or permanent. The 410 (Gone) #>  status code SHOULD be used if the server knows, through some internally configurable #>  mechanism, that an old resource is permanently unavailable and has no forwarding #>  address. This status code is commonly used when the server does not wish to #>  reveal exactly why the request has been refused, or when no other response #> is applicable. x$behavior <- \"warning\" x$do(res) #> Warning message: #> Not Found (HTTP 404) x$behavior <- \"message\" x$do(res) #> Not Found (HTTP 404)"},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"retrying-requests","dir":"Articles","previous_headings":"","what":"Retrying requests","title":"5. API package best practices","text":"failure scenarios may make sense retry request. example, 429 “many requests” http status returned, can retry request certain amount time (time supplied server). suggest using RETRY scenarios. See HttpClient$retry() information.","code":""},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"mocking-with-webmockr","dir":"Articles","previous_headings":"","what":"Mocking with webmockr","title":"5. API package best practices","text":"webmockr package stubbing setting expectations HTTP requests. support working two HTTP request packages: crul httr. variety use cases webmockr. Use interactive R session ’re working project want mock HTTP requests set certain responses. can plane still allow requests work without internet connection setting response give back. Test hard test scenarios code package. webmockr allows give back exact responses just describe even fail certain HTTP conditions. Getting certain failures happen remote server can sometimes difficult. Package test suite: can use webmockr test suite, although next section covers vcr builds top webmockr ideal tests. See book HTTP mocking testing R .","code":""},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"testing-with-vcr","dir":"Articles","previous_headings":"","what":"Testing with vcr","title":"5. API package best practices","text":"vcr records replays HTTP requests. main use case caching HTTP requests test suites R packages. support working two HTTP request packages: crul httr. use vcr testing setup pretty easy. Add vcr Suggests DESCRIPTION file Make file tests/testthat/ directory called helper-yourpackage.R (skip similar file already exists). file use following lines setup path storing cassettes (change path whatever want): tests, whichever tests want use vcr, wrap tests vcr::use_cassette() call like: ’s ! Just run tests normally HTTP requests done crul httr cached first test run cached responses used every time thereafter. See book HTTP mocking testing R .","code":"library(\"vcr\") invisible(vcr::vcr_configure()) library(testthat) test_that(\"my test\", {   vcr::use_cassette(\"rl_citation\", {     aa <- rl_citation()      expect_is(aa, \"character\")     expect_match(aa, \"IUCN\")     expect_match(aa, \"www.iucnredlist.org\")   }) })"},{"path":"https://docs.ropensci.org/crul/articles/best-practices-api-packages.html","id":"what-else","dir":"Articles","previous_headings":"","what":"What else?","title":"5. API package best practices","text":"Let us know ’s anything else ’d like see document /’s anything can explained better. Last, httr package similar article best practices, see https://httr.r-lib.org/articles/api-packages.html","code":""},{"path":"https://docs.ropensci.org/crul/articles/choosing-a-client.html","id":"httprequest","dir":"Articles","previous_headings":"","what":"HttpRequest","title":"6. Choosing a HTTP request class","text":"HttpRequest related , table doesn’t actual HTTP requests, used build HTTP requests pass AsyncVaried. simplified class Async relative AsyncVaried uses HttpRequest internally build requests.","code":""},{"path":"https://docs.ropensci.org/crul/articles/choosing-a-client.html","id":"more-async","dir":"Articles","previous_headings":"","what":"More Async","title":"6. Choosing a HTTP request class","text":"See async crul vignette details asynchronous requests.","code":""},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"install","dir":"Articles","previous_headings":"","what":"Install","title":"1. crul introduction","text":"Stable CRAN version Dev version","code":"install.packages(\"crul\") install.packages(\"pak\") pak::pkg_install(\"ropensci/crul\") library(\"crul\")"},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"httpclient---the-main-interface","dir":"Articles","previous_headings":"","what":"HttpClient - the main interface","title":"1. crul introduction","text":"HttpClient start Makes R6 class, bits bobs ’d expect HTTP requests. prints, gives defaults ’ve set. update object can see ’s set","code":"(x <- HttpClient$new(   url = \"https://hb.opencpu.org\",   opts = list(     timeout = 1   ),   headers = list(     a = \"hello world\"   ) )) #> <crul connection>  #>   url: https://hb.opencpu.org #>   curl options:  #>     timeout: 1 #>   proxies:  #>   auth:  #>   headers:  #>     a: hello world #>   progress: FALSE #>   hooks: x$opts #> $timeout #> [1] 1 x$headers #> $a #> [1] \"hello world\""},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"do-some-http-requests","dir":"Articles","previous_headings":"","what":"Do some HTTP requests","title":"1. crul introduction","text":"client object created http methods can call, pass paths , well query parameters, body values, curl options. , ’ll GET request route /get base url https://hb.opencpu.org (full url https://hb.opencpu.org/get) response http request another R6 class HttpResponse, slots outputs request, functions deal response: Status code content HTTP method Request headers Response headers response headers, including intermediate headers, can parse content provided function: HttpClient object, holds configuration stuff set, can make HTTP verb requests. example, HEAD request:","code":"res <- x$get(\"get\") res$status_code #> [1] 200 res$content #>   [1] 7b 0a 20 20 22 61 72 67 73 22 3a 20 7b 7d 2c 20 0a 20 20 22 68 65 61 64 65 #>  [26] 72 73 22 3a 20 7b 0a 20 20 20 20 22 41 22 3a 20 22 68 65 6c 6c 6f 20 77 6f #>  [51] 72 6c 64 22 2c 20 0a 20 20 20 20 22 41 63 63 65 70 74 22 3a 20 22 61 70 70 #>  [76] 6c 69 63 61 74 69 6f 6e 2f 6a 73 6f 6e 2c 20 74 65 78 74 2f 78 6d 6c 2c 20 #> [101] 61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 6d 6c 2c 20 2a 2f 2a 22 2c 20 0a 20 #> [126] 20 20 20 22 41 63 63 65 70 74 2d 45 6e 63 6f 64 69 6e 67 22 3a 20 22 67 7a #> [151] 69 70 2c 20 64 65 66 6c 61 74 65 22 2c 20 0a 20 20 20 20 22 43 6f 6e 6e 65 #> [176] 63 74 69 6f 6e 22 3a 20 22 63 6c 6f 73 65 22 2c 20 0a 20 20 20 20 22 48 6f #> [201] 73 74 22 3a 20 22 68 74 74 70 62 69 6e 3a 38 30 38 30 22 2c 20 0a 20 20 20 #> [226] 20 22 55 73 65 72 2d 41 67 65 6e 74 22 3a 20 22 6c 69 62 63 75 72 6c 2f 37 #> [251] 2e 38 37 2e 30 20 72 2d 63 75 72 6c 2f 35 2e 30 2e 30 20 63 72 75 6c 2f 31 #> [276] 2e 33 2e 39 31 30 30 22 0a 20 20 7d 2c 20 0a 20 20 22 6f 72 69 67 69 6e 22 #> [301] 3a 20 22 31 37 32 2e 31 38 2e 30 2e 34 22 2c 20 0a 20 20 22 75 72 6c 22 3a #> [326] 20 22 68 74 74 70 3a 2f 2f 68 74 74 70 62 69 6e 3a 38 30 38 30 2f 67 65 74 #> [351] 22 0a 7d 0a res$method #> [1] \"get\" res$request_headers #> $`User-Agent` #> [1] \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\" #>  #> $`Accept-Encoding` #> [1] \"gzip, deflate\" #>  #> $Accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  #> $a #> [1] \"hello world\" res$response_headers #> $status #> [1] \"HTTP/1.1 200 OK\" #>  #> $server #> [1] \"nginx/1.20.2\" #>  #> $date #> [1] \"Wed, 10 May 2023 21:55:58 GMT\" #>  #> $`content-type` #> [1] \"application/json\" #>  #> $`content-length` #> [1] \"354\" #>  #> $connection #> [1] \"keep-alive\" #>  #> $`access-control-allow-origin` #> [1] \"*\" #>  #> $`access-control-allow-credentials` #> [1] \"true\" #>  #> $`x-powered-by` #> [1] \"Flask\" #>  #> $`x-processed-time` #> [1] \"0\" res$response_headers_all #> [[1]] #> [[1]]$status #> [1] \"HTTP/1.1 200 OK\" #>  #> [[1]]$server #> [1] \"nginx/1.20.2\" #>  #> [[1]]$date #> [1] \"Wed, 10 May 2023 21:55:58 GMT\" #>  #> [[1]]$`content-type` #> [1] \"application/json\" #>  #> [[1]]$`content-length` #> [1] \"354\" #>  #> [[1]]$connection #> [1] \"keep-alive\" #>  #> [[1]]$`access-control-allow-origin` #> [1] \"*\" #>  #> [[1]]$`access-control-allow-credentials` #> [1] \"true\" #>  #> [[1]]$`x-powered-by` #> [1] \"Flask\" #>  #> [[1]]$`x-processed-time` #> [1] \"0\" res$parse() #> [1] \"{\\n  \\\"args\\\": {}, \\n  \\\"headers\\\": {\\n    \\\"A\\\": \\\"hello world\\\", \\n    \\\"Accept\\\": \\\"application/json, text/xml, application/xml, */*\\\", \\n    \\\"Accept-Encoding\\\": \\\"gzip, deflate\\\", \\n    \\\"Connection\\\": \\\"close\\\", \\n    \\\"Host\\\": \\\"httpbin:8080\\\", \\n    \\\"User-Agent\\\": \\\"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\\\"\\n  }, \\n  \\\"origin\\\": \\\"172.18.0.4\\\", \\n  \\\"url\\\": \\\"http://httpbin:8080/get\\\"\\n}\\n\" jsonlite::fromJSON(res$parse()) #> $args #> named list() #>  #> $headers #> $headers$A #> [1] \"hello world\" #>  #> $headers$Accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  #> $headers$`Accept-Encoding` #> [1] \"gzip, deflate\" #>  #> $headers$Connection #> [1] \"close\" #>  #> $headers$Host #> [1] \"httpbin:8080\" #>  #> $headers$`User-Agent` #> [1] \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\" #>  #>  #> $origin #> [1] \"172.18.0.4\" #>  #> $url #> [1] \"http://httpbin:8080/get\" x$post(   path = \"post\",    body = list(hello = \"world\") )"},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"write-to-disk","dir":"Articles","previous_headings":"","what":"write to disk","title":"1. crul introduction","text":"Read lines","code":"x <- HttpClient$new(url = \"https://hb.opencpu.org\") f <- tempfile() res <- x$get(disk = f) # when using write to disk, content is a path res$content  #> [1] \"/var/folders/vw/4nm3x1ld0_jgmqy6_yf6pz3c0000gn/T//RtmpZ9O9vQ/file17033155d5263\" readLines(res$content, n = 10) #>  [1] \"<!DOCTYPE html>\"                                                                            #>  [2] \"<html>\"                                                                                     #>  [3] \"<head>\"                                                                                     #>  [4] \"  <meta http-equiv='content-type' value='text/html;charset=utf8'>\"                          #>  [5] \"  <meta name='generator' value='Ronn/v0.7.3 (http://github.com/rtomayko/ronn/tree/0.7.3)'>\" #>  [6] \"  <title>httpbin(1): HTTP Client Testing Service<\/title>\"                                   #>  [7] \"  <style type='text/css' media='all'>\"                                                      #>  [8] \"  /* style: man */\"                                                                         #>  [9] \"  body#manpage {margin:0}\"                                                                  #> [10] \"  .mp {max-width:100ex;padding:0 9ex 1ex 4ex}\""},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"stream-data","dir":"Articles","previous_headings":"","what":"stream data","title":"1. crul introduction","text":"","code":"(x <- HttpClient$new(url = \"https://hb.opencpu.org\")) #> <crul connection>  #>   url: https://hb.opencpu.org #>   curl options:  #>   proxies:  #>   auth:  #>   headers:  #>   progress: FALSE #>   hooks: res <- x$get('stream/5', stream = function(x) cat(rawToChar(x))) #> {\"url\": \"http://httpbin:8080/stream/5\", \"headers\": {\"Connection\": \"close\", \"Host\": \"httpbin:8080\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json, text/xml, application/xml, */*\", \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\"}, \"args\": {}, \"id\": 0, \"origin\": \"172.18.0.4\"} #> {\"url\": \"http://httpbin:8080/stream/5\", \"headers\": {\"Connection\": \"close\", \"Host\": \"httpbin:8080\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json, text/xml, application/xml, */*\", \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\"}, \"args\": {}, \"id\": 1, \"origin\": \"172.18.0.4\"} #> {\"url\": \"http://httpbin:8080/stream/5\", \"headers\": {\"Connection\": \"close\", \"Host\": \"httpbin:8080\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json, text/xml, application/xml, */*\", \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\"}, \"args\": {}, \"id\": 2, \"origin\": \"172.18.0.4\"} #> {\"url\": \"http://httpbin:8080/stream/5\", \"headers\": {\"Connection\": \"close\", \"Host\": \"httpbin:8080\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json, text/xml, application/xml, */*\", \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\"}, \"args\": {}, \"id\": 3, \"origin\": \"172.18.0.4\"} #> {\"url\": \"http://httpbin:8080/stream/5\", \"headers\": {\"Connection\": \"close\", \"Host\": \"httpbin:8080\", \"Accept-Encoding\": \"gzip, deflate\", \"Accept\": \"application/json, text/xml, application/xml, */*\", \"User-Agent\": \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\"}, \"args\": {}, \"id\": 4, \"origin\": \"172.18.0.4\"} # when streaming, content is NULL res$content  #> NULL"},{"path":"https://docs.ropensci.org/crul/articles/crul.html","id":"learn-more","dir":"Articles","previous_headings":"","what":"Learn more","title":"1. crul introduction","text":"Learn vignettes: crul workflows async crul curl options API package best practices Choosing HTTP request class","code":""},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"discover-curl-options","dir":"Articles","previous_headings":"","what":"Discover curl options","title":"4. curl options","text":"can go source, curl book https://everything.curl.dev/. R: curl::curl_options() finding curl options. gives information curl option, including libcurl variable name (e.g., CURLOPT_CERTINFO) type variable (e.g., logical).","code":""},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"other-ways-to-use-curl-besides-r","dir":"Articles","previous_headings":"","what":"Other ways to use curl besides R","title":"4. curl options","text":"Perhaps canonical way use curl command line. can get curl operating system https://curl.se/download.html, though hopefully already curl. curl, can lots fun. example, get contents Google landing page: like may also like httpie, Python command line tool little convenient curl (e.g., JSON output automatically parsed colorized). Alot data web JSON format. great command line tool pair curl jq. Note: windows may require extra setup want play curl command line. OSX linux default. Windows 8, installing latest version https://curl.se/download.html#Win64 worked .","code":"curl https://www.google.com"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"general-info","dir":"Articles","previous_headings":"","what":"general info","title":"4. curl options","text":"crul set curl options per object, globally across HTTP requests. may allow global curl option setting future.","code":""},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"using-curl-options-in-other-packages","dir":"Articles","previous_headings":"","what":"using curl options in other packages","title":"4. curl options","text":"recommend using ... allow users pass curl options. example, lets say function package make easy users pass curl options use ... can pass combination acceptable curl options: can instead make users pass list, e.g.: user pass curl options like:","code":"foo <- function() {   z <- crul::HttpClient$new(url = yoururl)   z$get() } foo <- function(...) {   z <- crul::HttpClient$new(url = yoururl, opts = list(...))   z$get() } foo(verbose = TRUE) #> verbose curl output foo <- function(opts = list()) {   z <- crul::HttpClient$new(url = yoururl, opts = opts)   z$get() } foo(opts = list(verbose = TRUE))"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"timeout","dir":"Articles","previous_headings":"","what":"timeout","title":"4. curl options","text":"Set timeout request. request exceeds timeout, request stops. relevant commands: timeout_ms=<integer> use ? sometimes working web resource somewhat unreliable. example, want run script server may take many hours, web resource point time, set timeout error catch response script doesn’t hang server ’s responding. Another example call web resource R package. test suite, may want test web resource responding quickly, set timeout, test fails.","code":"HttpClient$new(\"https://www.google.com/search\",    opts = list(timeout_ms = 1))$get() #> Error in curl::curl_fetch_memory(x$url$url, handle = x$url$handle) : #>  Timeout was reached: Operation timed out after 35 milliseconds with 0 bytes received"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"verbose","dir":"Articles","previous_headings":"","what":"verbose","title":"4. curl options","text":"Print detailed info curl call relevant commands: verbose=<boolean> Just HEAD request don’t deal big output use ? can see verbose output gives lots information may useful debugging request. typically don’t need verbose output unless want inspect request.","code":"HttpClient$new(\"https://hb.opencpu.org\",    opts = list(verbose = TRUE))$head() #> > HEAD / HTTP/1.1 #> Host: hb.opencpu.org #> User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.4.9521 #> Accept: */* #> Accept-Encoding: gzip, deflate #>  #> < HTTP/1.1 200 OK #> < Connection: keep-alive #> < Server: gunicorn/19.8.1 #> < Date: Fri, 06 Jul 2018 17:56:50 GMT #> < Content-Type: text/html; charset=utf-8 #> < Content-Length: 8344 #> < Access-Control-Allow-Origin: * #> < Access-Control-Allow-Credentials: true #> < Via: 1.1 vegur"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"headers","dir":"Articles","previous_headings":"","what":"headers","title":"4. curl options","text":"Add headers modify requests, including authentication, setting content-type, accept type, etc. relevant commands: HttpClient$new(headers = list(...)) use ? web resources, using headers mandatory, httr makes including quite easy. Headers nice e.g., passing authentication header instead URL string means private data exposed prying eyes.","code":"x <- HttpClient$new(\"https://hb.opencpu.org\",    headers = list(     Accept = \"application/json\",      foo = \"bar\"   ),    opts = list(verbose = TRUE) ) x$head() #> > HEAD / HTTP/1.1 #> Host: hb.opencpu.org #> User-Agent: libcurl/7.54.0 r-curl/3.2 crul/0.5.4.9521 #> Accept-Encoding: gzip, deflate #> Accept: application/json #> foo: bar #>  #> < HTTP/1.1 200 OK #> < Connection: keep-alive #> < Server: gunicorn/19.8.1 #> < Date: Fri, 06 Jul 2018 17:59:15 GMT #> < Content-Type: text/html; charset=utf-8 #> < Content-Length: 8344 #> < Access-Control-Allow-Origin: * #> < Access-Control-Allow-Credentials: true #> < Via: 1.1 vegur"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"authenticate","dir":"Articles","previous_headings":"","what":"authenticate","title":"4. curl options","text":"Set authentication details resource relevant commands: auth() auth() basic username/password authentication use API key, depends data provider. may request one either header query parameter (passed URL string) Another authentication option OAuth. OAuth supported crul yet. can always OAuth httr take token pass header/etc. crul.","code":"auth(user = \"foo\", pwd = \"bar\") #> $userpwd #> [1] \"foo:bar\" #>  #> $httpauth #> [1] 1 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"basic\" HttpClient$new(\"https://hb.opencpu.org/get\", headers = list(Authorization = \"Bearer 234kqhrlj2342\")) HttpClient$new(\"https://hb.opencpu.org/get\", query = list(api_key = \"<your key>\"))"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"cookies","dir":"Articles","previous_headings":"","what":"cookies","title":"4. curl options","text":"Set get cookies. relevant commands: auth() Set cookies (just showing response headers) cookies response, can access curl::handle_cookies like:","code":"x <- HttpClient$new(url = \"https://www.google.com\", opts = list(verbose = TRUE)) res <- x$get() #> < HTTP/1.1 200 OK #> < Date: Fri, 06 Jul 2018 23:25:49 GMT #> < Expires: -1 #> < Cache-Control: private, max-age=0 #> < Content-Type: text/html; charset=ISO-8859-1 #> < P3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\" #> < Content-Encoding: gzip #> < Server: gws #> < X-XSS-Protection: 1; mode=block #> < X-Frame-Options: SAMEORIGIN #> * Added cookie 1P_JAR=\"2018-07-06-23\" for domain google.com, path /, expire 1533511549 #> < Set-Cookie: 1P_JAR=2018-07-06-23; expires=Sun, 05-Aug-2018 23:25:49 GMT; path=/; domain=.google.com #> * Added cookie NID=\"134=yt47WC-2mhTgQpkSCMz_ySTig3MCJD5Bx_lNj_aVLAwKu8SPMX-CCowKfU8zSv2cJ2OjiX2LTrYnhWMGvIDieCC419v0VHvlm4Hl9xln9-r4MZwcnqwTZQPT72VNE0uA\" for domain google.com, path /, expire 1546730749 #> < Set-Cookie: NID=134=yt47WC-2mhTgQpkSCMz_ySTig3MCJD5Bx_lNj_aVLAwKu8SPMX-CCowKfU8zSv2cJ2OjiX2LTrYnhWMGvIDieCC419v0VHvlm4Hl9xln9-r4MZwcnqwTZQPT72VNE0uA; expires=Sat, 05-Jan-2019 23:25:49 GMT; path=/; domain=.google.com; HttpOnly #> < Alt-Svc: quic=\":443\"; ma=2592000; v=\"43,42,41,39,35\" #> < Transfer-Encoding: chunked curl::handle_cookies(res$handle) #>                  domain flag path secure          expiration   name #> 1           .google.com TRUE    /  FALSE 2018-08-05 16:25:16 1P_JAR #> 2 #HttpOnly_.google.com TRUE    /  FALSE 2019-01-05 15:25:16    NID #>   value #> 1 2018-07-06-23 #> 2 134=4E_Zo-cY8hRLNSj47jRJQML0CPQ8Ip__ ..."},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"progress","dir":"Articles","previous_headings":"","what":"progress","title":"4. curl options","text":"Print curl progress relevant commands: HttpClient$new(progress = fxn) use ? imagine, increasingly useful request web resource takes longer longer. long requests, help know approximately request finish.","code":"x <- HttpClient$new(\"https://hb.opencpu.org/get\", progress = httr::progress()) #> |==================================| 100%"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"proxies","dir":"Articles","previous_headings":"","what":"proxies","title":"4. curl options","text":"behind proxy, give authentication details proxy. relevant commands: HttpClient$new(proxies = proxy(\"http://97.77.104.22:3128\", \"foo\", \"bar\")) use ? us likely don’t need worry . However, work place, maybe certain geographic locations, may use proxy. haven’t personally used proxy R, feedback great.","code":"prox <- proxy(\"125.39.66.66\", port = 80, username = \"username\", password = \"password\") HttpClient$new(\"http://www.google.com/search\", proxies = prox)"},{"path":"https://docs.ropensci.org/crul/articles/curl-options.html","id":"user-agent","dir":"Articles","previous_headings":"","what":"user agent","title":"4. curl options","text":"resources require user-agent string. relevant commands: HttpClient$new(headers = list(User-Agent= \"foobar\")) HttpClient$new(opts = list(useragent = \"foobar\")) result thing use ? set default http request, can see first example user agent. web APIs require set specific user agent. example, GitHub API requires include user agent string header request username name application can contact problem.","code":""},{"path":"https://docs.ropensci.org/crul/articles/how-to-use-crul.html","id":"a-simple-http-request-function","dir":"Articles","previous_headings":"","what":"A simple HTTP request function","title":"2. crul workflows","text":"likely ’ll want GET request - let’s start - though details much different HTTP verbs. cases ’ll likely want asynchronous requests - though see . ’ll probably want write small function, like (annotated clarity) Use function Now can use make_request function script package.","code":"make_request <- function(url) {   # create a HttpClient object, defining the url   cli <- crul::HttpClient$new(url = url)   # do a GET request   res <- cli$get()   # check to see if request failed or succeeded   # - if succeeds this will return nothing and proceeds to next step   res$raise_for_status()   # parse response to plain text (JSON in this case) - most likely you'll    # want UTF-8 encoding   txt <- res$parse(\"UTF-8\")   # parse the JSON to an R list   jsonlite::fromJSON(txt) } make_request(\"https://hb.opencpu.org/get\") #> $args #> named list() #>  #> $headers #> $headers$Accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  #> $headers$`Accept-Encoding` #> [1] \"gzip, deflate\" #>  #> $headers$Connection #> [1] \"close\" #>  #> $headers$Host #> [1] \"httpbin:8080\" #>  #> $headers$`User-Agent` #> [1] \"libcurl/7.87.0 r-curl/5.0.0 crul/1.3.9100\" #>  #>  #> $origin #> [1] \"172.18.0.4\" #>  #> $url #> [1] \"http://httpbin:8080/get\""},{"path":"https://docs.ropensci.org/crul/articles/how-to-use-crul.html","id":"more-customized-function","dir":"Articles","previous_headings":"","what":"More customized function","title":"2. crul workflows","text":"get familiar (’re already familiar HTTP) may want control, toggle switches. next function, ’ll allow users pass curl options, use custom HTTP status checker, xxx. Use function different first function (besides URL). However, now can pass curl options: can also pass named parameters supported get method, including query, disk, stream. addition, failure behavior different, customized specific web resource working ","code":"make_request2 <- function(url, ...) {   # create a HttpClient object, defining the url   cli <- crul::HttpClient$new(url = url)   # do a GET request, allow curl options to be passed in   res <- cli$get(...)   # check to see if request failed or succeeded   # - a custom approach this time combining status code,    #   explanation of the code, and message from the server   if (res$status_code > 201) {     mssg <- jsonlite::fromJSON(res$parse(\"UTF-8\"))$message$message     x <- res$status_http()     stop(       sprintf(\"HTTP (%s) - %s\\n  %s\", x$status_code, x$explanation, mssg),       call. = FALSE     )   }   # parse response   txt <- res$parse(\"UTF-8\")   # parse the JSON to an R list   jsonlite::fromJSON(txt) } make_request2(\"https://api.crossref.org/works?rows=0\") #> $status #> [1] \"ok\" #>  #> $`message-type` #> [1] \"work-list\" #>  #> $`message-version` #> [1] \"1.0.0\" #>  #> $message #> $message$facets #> named list() #>  #> $message$`total-results` #> [1] 144645917 #>  #> $message$items #> list() #>  #> $message$`items-per-page` #> [1] 0 #>  #> $message$query #> $message$query$`start-index` #> [1] 0 #>  #> $message$query$`search-terms` #> NULL make_request2(\"https://api.crossref.org/works?rows=0\", verbose = TRUE) make_request2(\"https://api.crossref.org/works?rows=0\", timeout_ms = 1) make_request2(\"https://api.crossref.org/works\", query = list(rows = 0)) #> $status #> [1] \"ok\" #>  #> $`message-type` #> [1] \"work-list\" #>  #> $`message-version` #> [1] \"1.0.0\" #>  #> $message #> $message$facets #> named list() #>  #> $message$`total-results` #> [1] 144645917 #>  #> $message$items #> list() #>  #> $message$`items-per-page` #> [1] 0 #>  #> $message$query #> $message$query$`start-index` #> [1] 0 #>  #> $message$query$`search-terms` #> NULL make_request2(\"https://api.crossref.org/works?rows=asdf\") #> Error: HTTP (400) - Bad request syntax or unsupported method #>   Integer specified as asdf but must be a positive integer less than or equal to 1000."},{"path":"https://docs.ropensci.org/crul/articles/how-to-use-crul.html","id":"asynchronous-requests","dir":"Articles","previous_headings":"","what":"Asynchronous requests","title":"2. crul workflows","text":"may want use asynchronous HTTP requests one HTTP request takes “long”. course relative. may dealing server responds slowly, circumstances. See async crul vignette details asynchronous requests.","code":""},{"path":"https://docs.ropensci.org/crul/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/crul/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). crul: HTTP Client. R package version 1.4.0https://docs.ropensci.org/crul/ (website) https://github.com/ropensci/crul (devel) https://books.ropensci.org/http-testing/ (user manual), https://docs.ropensci.org/crul/ (website)https://github.com/ropensci/crul (devel)https://books.ropensci.org/http-testing/ (user manual).","code":"@Manual{,   title = {crul: HTTP Client},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 1.4.0https://docs.ropensci.org/crul/ (website) https://github.com/ropensci/crul (devel) https://books.ropensci.org/http-testing/ (user manual)},   url = {https://docs.ropensci.org/crul/ (website) https://github.com/ropensci/crul (devel) https://books.ropensci.org/http-testing/ (user manual)}, }"},{"path":"https://docs.ropensci.org/crul/index.html","id":"crul-","dir":"","previous_headings":"","what":"HTTP Client","title":"HTTP Client","text":"HTTP client, taking inspiration Ruby’s faraday Python’s requests Package documentation: https://docs.ropensci.org/crul/ Features: HttpClient - Main interface making HTTP requests. Synchronous requests . HttpResponse - HTTP response object, used responses across different clients. Paginator - Auto-paginate requests - supports subset possible pagination scenarios - fill scenarios soon Async - Asynchronous HTTP requests - simple interface many URLS - whose interface similar HttpClient - URLs treated . AsyncVaried - Asynchronous HTTP requests - accepts number HttpRequest objects - different interface HttpClient/Async due nature handling requests different HTTP methods, options, etc. set curl options globally: set_auth(), set_headers(), Writing disk streaming: available synchronous requests well async requests Hooks requests responses available HttpClient method , allow trigger functions run requests responses, . See ?hooks details examples Mocking: crul integrates webmockr mock HTTP requests. Checkout http testing book Test caching: crul also integrates vcr cache http requests/responses. Checkout http testing book","code":""},{"path":"https://docs.ropensci.org/crul/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"HTTP Client","text":"CRAN version Latest binaries rOpenSci Dev version GitHub","code":"install.packages(\"crul\") install.packages(\"crul\", repos = \"https://dev.ropensci.org\") install.packages(\"pak\") pak::pkg_install(\"ropensci/crul\") library(\"crul\")"},{"path":"https://docs.ropensci.org/crul/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"HTTP Client","text":"Please report issues bugs. License: MIT Get citation information crul R citation(package = 'crul') Please note package released Contributor Code Conduct. contributing project, agree abide terms. package name come ? play “curl”, popular command line client. sticker design come ? sticker idea arose tweet - crul close (ish) Krull, 1980’s movie “mystical five-pointed weapon”. association Krull known naming package.","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple async client — Async","title":"Simple async client — Async","text":"async client work many URLs, HTTP method","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple async client — Async","text":"list, objects class HttpResponse(). Responses returned order passed . print first 10.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple async client — Async","text":"See HttpClient() information parameters.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"failure-behavior","dir":"Reference","previous_headings":"","what":"Failure behavior","title":"Simple async client — Async","text":"HTTP requests mostly fail ways probably familiar , including 400 response (URL found), server made mistake (500 series HTTP status code). requests can fail sometimes HTTP status code, agreed upon way handle just fail immediately. request fails using synchronous requests (see HttpClient) get error message stops code progression immediately saying example: \"resolve host: https://foo.com\" \"Failed connect foo.com\" \"Resolving timed 10 milliseconds\" However, async requests want fail immediately stop subsequent requests occurring. Thus, find request fails one reasons give back HttpResponse object just like response, : capture error message put content slot response object (thus calls content parse() work correctly) give back 0 HTTP status code. handle specially testing whether request successful e.g., success() method","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"Simple async client — Async","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Simple async client — Async","text":"urls (character) one URLs opts curl options proxies named list headers auth object class auth headers named list headers","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Simple async client — Async","text":"Async$print() Async$new() Async$get() Async$post() Async$put() Async$patch() Async$delete() Async$head() Async$retry() Async$verb() Async$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Simple async client — Async","text":"print method Async objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Simple async client — Async","text":"Create new Async object","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$new(urls, opts, proxies, auth, headers)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"urls (character) one URLs opts curl options proxies proxy() object auth auth() object headers named list headers","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Simple async client — Async","text":"new Async object.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Simple async client — Async","text":"execute GET http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$get(path = NULL, query = list(), disk = NULL, stream = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL query (list) query terms, named list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple async client — Async","text":"","code":"\\dontrun{ (cc <- Async$new(urls = c(     'https://hb.opencpu.org/',     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar'   ))) (res <- cc$get()) }"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"Simple async client — Async","text":"execute POST http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$post(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   disk = NULL,   stream = NULL,   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL query (list) query terms, named list body body R list encode one form, multipart, json, raw disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"Simple async client — Async","text":"execute PUT http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$put(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   disk = NULL,   stream = NULL,   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL query (list) query terms, named list body body R list encode one form, multipart, json, raw disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-patch-","dir":"Reference","previous_headings":"","what":"Method patch()","title":"Simple async client — Async","text":"execute PATCH http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$patch(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   disk = NULL,   stream = NULL,   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL query (list) query terms, named list body body R list encode one form, multipart, json, raw disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"Simple async client — Async","text":"execute DELETE http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$delete(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   disk = NULL,   stream = NULL,   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL query (list) query terms, named list body body R list encode one form, multipart, json, raw disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"Simple async client — Async","text":"execute HEAD http verb urls","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$head(path = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"path (character) URL path, appended base URL ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-retry-","dir":"Reference","previous_headings":"","what":"Method retry()","title":"Simple async client — Async","text":"execute RETRY http verb urls. see HttpRequest$retry method parameters","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$retry(...)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-verb-","dir":"Reference","previous_headings":"","what":"Method verb()","title":"Simple async client — Async","text":"execute supported HTTP verb","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$verb(verb, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"verb (character) supported HTTP verb: get, post, put, patch, delete, head. ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple async client — Async","text":"","code":"\\dontrun{ cc <- Async$new(   urls = c(     'https://hb.opencpu.org/',     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar'   ) ) (res <- cc$verb('get')) lapply(res, function(z) z$parse(\"UTF-8\")) }"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Simple async client — Async","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple async client — Async","text":"","code":"Async$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple async client — Async","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Async.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple async client — Async","text":"","code":"if (FALSE) { cc <- Async$new(   urls = c(     'https://hb.opencpu.org/',     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar'   ) ) cc (res <- cc$get()) res[[1]] res[[1]]$url res[[1]]$success() res[[1]]$status_http() res[[1]]$response_headers res[[1]]$method res[[1]]$content res[[1]]$parse(\"UTF-8\") lapply(res, function(z) z$parse(\"UTF-8\"))  # curl options/headers with async urls = c(  'https://hb.opencpu.org/',  'https://hb.opencpu.org/get?a=5',  'https://hb.opencpu.org/get?foo=bar' ) cc <- Async$new(urls = urls,    opts = list(verbose = TRUE),   headers = list(foo = \"bar\") ) cc (res <- cc$get())  # using auth with async dd <- Async$new(   urls = rep('https://hb.opencpu.org/basic-auth/user/passwd', 3),   auth = auth(user = \"foo\", pwd = \"passwd\"),   opts = list(verbose = TRUE) ) dd res <- dd$get() res vapply(res, function(z) z$status_code, double(1)) vapply(res, function(z) z$success(), logical(1)) lapply(res, function(z) z$parse(\"UTF-8\"))  # failure behavior ## e.g. when a URL doesn't exist, a timeout, etc. urls <- c(\"http://stuffthings.gvb\", \"https://foo.com\",    \"https://hb.opencpu.org/get\") conn <- Async$new(urls = urls) res <- conn$get() res[[1]]$parse(\"UTF-8\") # a failure res[[2]]$parse(\"UTF-8\") # a failure res[[3]]$parse(\"UTF-8\") # a success  # retry urls = c(\"https://hb.opencpu.org/status/404\", \"https://hb.opencpu.org/status/429\") conn <- Async$new(urls = urls) res <- conn$retry(verb=\"get\") }  ## ------------------------------------------------ ## Method `Async$get` ## ------------------------------------------------  if (FALSE) { (cc <- Async$new(urls = c(     'https://hb.opencpu.org/',     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar'   ))) (res <- cc$get()) }  ## ------------------------------------------------ ## Method `Async$verb` ## ------------------------------------------------  if (FALSE) { cc <- Async$new(   urls = c(     'https://hb.opencpu.org/',     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar'   ) ) (res <- cc$verb('get')) lapply(res, function(z) z$parse(\"UTF-8\")) }"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":null,"dir":"Reference","previous_headings":"","what":"AsyncQueue — AsyncQueue","title":"AsyncQueue — AsyncQueue","text":"AsyncQueue client","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"AsyncQueue — AsyncQueue","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"AsyncQueue — AsyncQueue","text":"crul::AsyncVaried -> AsyncQueue","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"AsyncQueue — AsyncQueue","text":"bucket_size (integer) number requests send sleep (integer) number seconds sleep bucket req_per_min (integer) requests per minute","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"AsyncQueue — AsyncQueue","text":"crul::AsyncVaried$requests()","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"AsyncQueue — AsyncQueue","text":"AsyncQueue$print() AsyncQueue$new() AsyncQueue$request() AsyncQueue$responses() AsyncQueue$parse() AsyncQueue$status_code() AsyncQueue$status() AsyncQueue$content() AsyncQueue$times() AsyncQueue$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"AsyncQueue — AsyncQueue","text":"print method AsyncQueue objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AsyncQueue — AsyncQueue","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"AsyncQueue — AsyncQueue","text":"Create new AsyncQueue object","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$new(   ...,   .list = list(),   bucket_size = 5,   sleep = NULL,   req_per_min = NULL )"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"AsyncQueue — AsyncQueue","text":"..., .list number objects class HttpRequest(), must supply inputs one parameters, bucket_size (integer) number requests send . default: 5. See Details. sleep (integer) seconds sleep buckets. default: NULL (set) req_per_min (integer) maximum number requests per minute. NULL (default), ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AsyncQueue — AsyncQueue","text":"Must set either sleep req_per_min. set req_per_min calculate new bucket_size $new() called","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"new AsyncQueue object","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-request-","dir":"Reference","previous_headings":"","what":"Method request()","title":"AsyncQueue — AsyncQueue","text":"Execute asynchronous requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$request()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"nothing, responses stored inside object, though print messages choose verbose output","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-responses-","dir":"Reference","previous_headings":"","what":"Method responses()","title":"AsyncQueue — AsyncQueue","text":"List responses","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$responses()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"list HttpResponse objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"AsyncQueue — AsyncQueue","text":"parse content","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$parse(encoding = \"UTF-8\")"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"AsyncQueue — AsyncQueue","text":"encoding (character) encoding use parsing. default:\"UTF-8\"","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"character vector, empty character vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-status-code-","dir":"Reference","previous_headings":"","what":"Method status_code()","title":"AsyncQueue — AsyncQueue","text":"Get HTTP status codes response","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$status_code()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"numeric vector, empty numeric vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"AsyncQueue — AsyncQueue","text":"List HTTP status objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$status()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"list http_code objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-content-","dir":"Reference","previous_headings":"","what":"Method content()","title":"AsyncQueue — AsyncQueue","text":"Get raw content response","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$content()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"raw list, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-times-","dir":"Reference","previous_headings":"","what":"Method times()","title":"AsyncQueue — AsyncQueue","text":"curl request times","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$times()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"AsyncQueue — AsyncQueue","text":"list named numeric vectors, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"AsyncQueue — AsyncQueue","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"AsyncQueue — AsyncQueue","text":"","code":"AsyncQueue$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"AsyncQueue — AsyncQueue","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncQueue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AsyncQueue — AsyncQueue","text":"","code":"if (FALSE) { # Using sleep (note this works with retry requests) reqlist <- list(   HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post(),   HttpRequest$new(url = \"https://hb.opencpu.org/put\")$put(),   HttpRequest$new(url = \"https://hb.opencpu.org/delete\")$delete(),   HttpRequest$new(url = \"https://hb.opencpu.org/get?g=5\")$get(),   HttpRequest$new(     url = \"https://hb.opencpu.org/post\")$post(body = list(y = 9)),   HttpRequest$new(     url = \"https://hb.opencpu.org/get\")$get(query = list(hello = \"world\")),   HttpRequest$new(url = \"https://ropensci.org\")$get(),   HttpRequest$new(url = \"https://ropensci.org/about\")$get(),   HttpRequest$new(url = \"https://ropensci.org/packages\")$get(),   HttpRequest$new(url = \"https://ropensci.org/community\")$get(),   HttpRequest$new(url = \"https://ropensci.org/blog\")$get(),   HttpRequest$new(url = \"https://ropensci.org/careers\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org/status/404\")$retry(\"get\") ) out <- AsyncQueue$new(.list = reqlist, bucket_size = 5, sleep = 3) out out$bucket_size # bucket size out$requests() # list requests out$request() # make requests out$responses() # list responses  # Using requests per minute if (interactive()) { x=\"https://raw.githubusercontent.com/ropensci/roregistry/gh-pages/registry.json\" z <- HttpClient$new(x)$get() urls <- jsonlite::fromJSON(z$parse(\"UTF-8\"))$packages$url repos = Filter(length, regmatches(urls, gregexpr(\"ropensci/[A-Za-z]+\", urls))) repos = unlist(repos) auth <- list(Authorization = paste(\"token\", Sys.getenv('GITHUB_PAT'))) reqs <- lapply(repos[1:50], function(w) {   HttpRequest$new(paste0(\"https://api.github.com/repos/\", w), headers = auth)$get() })  out <- AsyncQueue$new(.list = reqs, req_per_min = 30) out out$bucket_size out$requests() out$request() out$responses() }}"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":null,"dir":"Reference","previous_headings":"","what":"Async client for different request types — AsyncVaried","title":"Async client for different request types — AsyncVaried","text":"async client many requests, different URLs, curl options, etc.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Async client for different request types — AsyncVaried","text":"object class AsyncVaried variables methods. HttpResponse objects returned order passed . print first 10.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"failure-behavior","dir":"Reference","previous_headings":"","what":"Failure behavior","title":"Async client for different request types — AsyncVaried","text":"HTTP requests mostly fail ways probably familiar , including 400 response (URL found), server made mistake (500 series HTTP status code). requests can fail sometimes HTTP status code, agreed upon way handle just fail immediately. request fails using synchronous requests (see HttpClient) get error message stops code progression immediately saying example: \"resolve host: https://foo.com\" \"Failed connect foo.com\" \"Resolving timed 10 milliseconds\" However, async requests want fail immediately stop subsequent requests occurring. Thus, find request fails one reasons give back HttpResponse object just like response, : capture error message put content slot response object (thus calls content parse() work correctly) give back 0 HTTP status code. handle specially testing whether request successful e.g., success() method","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"Async client for different request types — AsyncVaried","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Async client for different request types — AsyncVaried","text":"AsyncVaried$print() AsyncVaried$new() AsyncVaried$request() AsyncVaried$responses() AsyncVaried$requests() AsyncVaried$parse() AsyncVaried$status_code() AsyncVaried$status() AsyncVaried$content() AsyncVaried$times() AsyncVaried$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Async client for different request types — AsyncVaried","text":"print method AsyncVaried objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async client for different request types — AsyncVaried","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Async client for different request types — AsyncVaried","text":"Create new AsyncVaried object","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$new(..., .list = list())"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async client for different request types — AsyncVaried","text":"..., .list number objects class HttpRequest(), must supply inputs one parameters, ","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"new AsyncVaried object","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-request-","dir":"Reference","previous_headings":"","what":"Method request()","title":"Async client for different request types — AsyncVaried","text":"Execute asynchronous requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$request()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"nothing, responses stored inside object, though print messages choose verbose output","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-responses-","dir":"Reference","previous_headings":"","what":"Method responses()","title":"Async client for different request types — AsyncVaried","text":"List responses","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$responses()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Async client for different request types — AsyncVaried","text":"S3 print method used summarise results. unclass output see list, index results, e.g., [1], [1:3]","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"list HttpResponse objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-requests-","dir":"Reference","previous_headings":"","what":"Method requests()","title":"Async client for different request types — AsyncVaried","text":"List requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$requests()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"list HttpRequest objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"Async client for different request types — AsyncVaried","text":"parse content","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$parse(encoding = \"UTF-8\")"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async client for different request types — AsyncVaried","text":"encoding (character) encoding use parsing. default:\"UTF-8\"","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"character vector, empty character vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-status-code-","dir":"Reference","previous_headings":"","what":"Method status_code()","title":"Async client for different request types — AsyncVaried","text":"Get HTTP status codes response","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$status_code()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"numeric vector, empty numeric vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"Async client for different request types — AsyncVaried","text":"List HTTP status objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$status()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"list http_code objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-content-","dir":"Reference","previous_headings":"","what":"Method content()","title":"Async client for different request types — AsyncVaried","text":"Get raw content response","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$content()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"raw list, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-times-","dir":"Reference","previous_headings":"","what":"Method times()","title":"Async client for different request types — AsyncVaried","text":"curl request times","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$times()"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Async client for different request types — AsyncVaried","text":"list named numeric vectors, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Async client for different request types — AsyncVaried","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Async client for different request types — AsyncVaried","text":"","code":"AsyncVaried$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Async client for different request types — AsyncVaried","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/AsyncVaried.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Async client for different request types — AsyncVaried","text":"","code":"if (FALSE) { # pass in requests via ... req1 <- HttpRequest$new(   url = \"https://hb.opencpu.org/get\",   opts = list(verbose = TRUE),   headers = list(foo = \"bar\") )$get() req2 <- HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post()  # Create an AsyncVaried object out <- AsyncVaried$new(req1, req2)  # before you make requests, the methods return empty objects out$status() out$status_code() out$content() out$times() out$parse() out$responses()  # make requests out$request()  # access various parts ## http status objects out$status() ## status codes out$status_code() ## content (raw data) out$content() ## times out$times() ## parsed content out$parse() ## response objects out$responses()  # use $verb() method to select http verb method <- \"post\" req1 <- HttpRequest$new(   url = \"https://hb.opencpu.org/post\",   opts = list(verbose = TRUE),   headers = list(foo = \"bar\") )$verb(method) req2 <- HttpRequest$new(url = \"https://hb.opencpu.org/post\")$verb(method) out <- AsyncVaried$new(req1, req2) out out$request() out$responses()  # pass in requests in a list via .list param reqlist <- list(   HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post(),   HttpRequest$new(url = \"https://hb.opencpu.org/put\")$put(),   HttpRequest$new(url = \"https://hb.opencpu.org/delete\")$delete(),   HttpRequest$new(url = \"https://hb.opencpu.org/get?g=5\")$get(),   HttpRequest$new(     url = \"https://hb.opencpu.org/post\")$post(body = list(y = 9)),   HttpRequest$new(     url = \"https://hb.opencpu.org/get\")$get(query = list(hello = \"world\")) )  out <- AsyncVaried$new(.list = reqlist) out$request() out$status() out$status_code() out$content() out$times() out$parse()  # using auth with async url <- \"https://hb.opencpu.org/basic-auth/user/passwd\" auth <- auth(user = \"user\", pwd = \"passwd\") reqlist <- list(   HttpRequest$new(url = url, auth = auth)$get(),   HttpRequest$new(url = url, auth = auth)$get(query = list(a=5)),   HttpRequest$new(url = url, auth = auth)$get(query = list(b=3)) ) out <- AsyncVaried$new(.list = reqlist) out$request() out$status() out$parse()  # failure behavior ## e.g. when a URL doesn't exist, a timeout, etc. reqlist <- list(   HttpRequest$new(url = \"http://stuffthings.gvb\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org\")$head(),   HttpRequest$new(url = \"https://hb.opencpu.org\",    opts = list(timeout_ms = 10))$head() ) (tmp <- AsyncVaried$new(.list = reqlist)) tmp$request() tmp$responses() tmp$parse(\"UTF-8\")  # access intemediate redirect headers dois <- c(\"10.7202/1045307ar\", \"10.1242/jeb.088898\", \"10.1121/1.3383963\") reqlist <- list(   HttpRequest$new(url = paste0(\"https://doi.org/\", dois[1]))$get(),   HttpRequest$new(url = paste0(\"https://doi.org/\", dois[2]))$get(),   HttpRequest$new(url = paste0(\"https://doi.org/\", dois[3]))$get() ) tmp <- AsyncVaried$new(.list = reqlist) tmp$request() tmp lapply(tmp$responses(), \"[[\", \"response_headers_all\")  # retry reqlist <- list(   HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post(),   HttpRequest$new(url = \"https://hb.opencpu.org/status/404\")$retry(\"get\"),   HttpRequest$new(url = \"https://hb.opencpu.org/status/429\")$retry(\"get\",    retry_only_on = c(403, 429), times = 2) ) tmp <- AsyncVaried$new(.list = reqlist) tmp tmp$request() tmp$responses()[[3]] }"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP client — HttpClient","title":"HTTP client — HttpClient","text":"Create execute HTTP requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HTTP client — HttpClient","text":"HttpResponse object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"HTTP client — HttpClient","text":"little quirk crul user agent string can passed either header curl option (lead User-Agent header passed HTTP request), return user agent string request_headers list response even pass useragent string curl option. Note whether pass header like User-Agent curl option like useragent, returned request_headers$User-Agent least accessing request headers consistent.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"HTTP client — HttpClient","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"handles","dir":"Reference","previous_headings":"","what":"handles","title":"HTTP client — HttpClient","text":"curl handles re-used level connection object, , HttpClient object separate one another better separate connections. pass curl handle handle parameter, gets created HTTP verb called. Thus, try get handle creating HttpClient object passing url parameter, handle NULL. pass curl handle handle parameter, can get handle HttpClient object. response http verb request handle handle slot.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HTTP client — HttpClient","text":"url (character) url opts (list) named list curl options proxies proxy() object auth auth() object headers (list) named list headers, see http-headers handle handle() progress supports httr::progress(), see progress hooks named list, see hooks","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTP client — HttpClient","text":"HttpClient$print() HttpClient$new() HttpClient$get() HttpClient$post() HttpClient$put() HttpClient$patch() HttpClient$delete() HttpClient$head() HttpClient$verb() HttpClient$retry() HttpClient$handle_pop() HttpClient$url_fetch() HttpClient$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"HTTP client — HttpClient","text":"print method HttpClient objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTP client — HttpClient","text":"Create new HttpClient object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$new(   url,   opts,   proxies,   auth,   headers,   handle,   progress,   hooks,   verbose )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"url (character) url. One url handle required. opts curl options proxies proxy() object auth auth() object headers named list headers, see http-headers handle handle() progress supports httr::progress(), see progress hooks named list, see hooks verbose special handler verbose curl output, accepts function . default NULL. used, verbose debugfunction curl options ignored passed opts $new() ignored ... passed http method call urls (character) one URLs","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTP client — HttpClient","text":"new HttpClient object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"HTTP client — HttpClient","text":"Make GET request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$get(path = NULL, query = list(), disk = NULL, stream = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"HTTP client — HttpClient","text":"Make POST request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$post(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"HTTP client — HttpClient","text":"Make PUT request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$put(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-patch-","dir":"Reference","previous_headings":"","what":"Method patch()","title":"HTTP client — HttpClient","text":"Make PATCH request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$patch(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"HTTP client — HttpClient","text":"Make DELETE request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$delete(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"HTTP client — HttpClient","text":"Make HEAD request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$head(path = NULL, query = list(), ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-verb-","dir":"Reference","previous_headings":"","what":"Method verb()","title":"HTTP client — HttpClient","text":"Use arbitrary HTTP verb supported class Supported verbs: \"get\", \"post\", \"put\", \"patch\", \"delete\", \"head\". Also supports retry","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$verb(verb, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"verb HTTP verb supported class: \"get\", \"post\", \"put\", \"patch\", \"delete\", \"head\". Also supports retry. ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP client — HttpClient","text":"","code":"\\dontrun{ (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) x$verb('get') x$verb('GET') x$verb('GET', query = list(foo = \"bar\")) x$verb('retry', 'GET', path = \"status/400\") }"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-retry-","dir":"Reference","previous_headings":"","what":"Method retry()","title":"HTTP client — HttpClient","text":"Retry request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$retry(   verb,   ...,   pause_base = 1,   pause_cap = 60,   pause_min = 1,   times = 3,   terminate_on = NULL,   retry_only_on = NULL,   onwait = NULL )"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"verb HTTP verb supported class: \"get\", \"post\", \"put\", \"patch\", \"delete\", \"head\". Also supports retry. ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest pause_base, pause_cap, pause_min basis, maximum, minimum calculating wait time retry. Wait time calculated according exponential backoff full jitter algorithm. Specifically, wait time chosen randomly pause_min lesser pause_base * 2 pause_cap, pause_base doubling subsequent retry attempt. Use pause_cap = Inf terminate retrying due cap wait time reached. times maximum number times retry. Set Inf stop retrying due exhausting number attempts. terminate_on, retry_only_on vector HTTP status codes. terminate_on, status codes terminate retrying, retry_only_on, status codes retry request. onwait callback function request retried wait time applied. function passed two parameters, response object failed request, wait time seconds. Note time spent function effectively adds wait time, kept simple.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTP client — HttpClient","text":"Retries request given verb successful (HTTP response status < 400), condition giving met. Automatically recognizes Retry-X-RateLimit-Reset headers response rate-limited remote APIs.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP client — HttpClient","text":"","code":"\\dontrun{ x <- HttpClient$new(url = \"https://hb.opencpu.org\")  # retry, by default at most 3 times (res_get <- x$retry(\"GET\", path = \"status/400\"))  # retry, but not for 404 NOT FOUND (res_get <- x$retry(\"GET\", path = \"status/404\", terminate_on = c(404)))  # retry, but only for exceeding rate limit (note that e.g. Github uses 403) (res_get <- x$retry(\"GET\", path = \"status/429\", retry_only_on = c(403, 429))) }"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-handle-pop-","dir":"Reference","previous_headings":"","what":"Method handle_pop()","title":"HTTP client — HttpClient","text":"reset curl handle","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$handle_pop()"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-url-fetch-","dir":"Reference","previous_headings":"","what":"Method url_fetch()","title":"HTTP client — HttpClient","text":"get URL sent (.e., executing request) things change URL path query parameters; body curl options change URL","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$url_fetch(path = NULL, query = list())"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTP client — HttpClient","text":"URL (character)","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP client — HttpClient","text":"","code":"x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$url_fetch() x$url_fetch('get') x$url_fetch('post') x$url_fetch('get', query = list(foo = \"bar\"))"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTP client — HttpClient","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP client — HttpClient","text":"","code":"HttpClient$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP client — HttpClient","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpClient.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP client — HttpClient","text":"","code":"if (FALSE) { # set your own handle (h <- handle(\"https://hb.opencpu.org\")) (x <- HttpClient$new(handle = h)) x$handle x$url (out <- x$get(\"get\")) x$handle x$url class(out) out$handle out$request_headers out$response_headers out$response_headers_all  # if you just pass a url, we create a handle for you #  this is how most people will use HttpClient (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) x$url x$handle # is empty, it gets created when a HTTP verb is called (r1 <- x$get('get')) x$url x$handle r1$url r1$handle r1$content r1$response_headers r1$parse()  (res_get2 <- x$get('get', query = list(hello = \"world\"))) res_get2$parse() library(\"jsonlite\") jsonlite::fromJSON(res_get2$parse())  # post request (res_post <- x$post('post', body = list(hello = \"world\")))  ## empty body request x$post('post')  # put request (res_put <- x$put('put'))  # delete request (res_delete <- x$delete('delete'))  # patch request (res_patch <- x$patch('patch'))  # head request (res_head <- x$head())  # query params are URL encoded for you, so DO NOT do it yourself ## if you url encode yourself, it gets double encoded, and that's bad (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) res <- x$get(\"get\", query = list(a = 'hello world'))  # access intermediate headers in response_headers_all x <- HttpClient$new(\"https://doi.org/10.1007/978-3-642-40455-9_52-1\") bb <- x$get() bb$response_headers_all }  ## ------------------------------------------------ ## Method `HttpClient$verb` ## ------------------------------------------------  if (FALSE) { (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) x$verb('get') x$verb('GET') x$verb('GET', query = list(foo = \"bar\")) x$verb('retry', 'GET', path = \"status/400\") }  ## ------------------------------------------------ ## Method `HttpClient$retry` ## ------------------------------------------------  if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\")  # retry, by default at most 3 times (res_get <- x$retry(\"GET\", path = \"status/400\"))  # retry, but not for 404 NOT FOUND (res_get <- x$retry(\"GET\", path = \"status/404\", terminate_on = c(404)))  # retry, but only for exceeding rate limit (note that e.g. Github uses 403) (res_get <- x$retry(\"GET\", path = \"status/429\", retry_only_on = c(403, 429))) }  ## ------------------------------------------------ ## Method `HttpClient$url_fetch` ## ------------------------------------------------  x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$url_fetch() #> [1] \"https://hb.opencpu.org/\" x$url_fetch('get') #> [1] \"https://hb.opencpu.org/get\" x$url_fetch('post') #> [1] \"https://hb.opencpu.org/post\" x$url_fetch('get', query = list(foo = \"bar\")) #> [1] \"https://hb.opencpu.org/get?foo=bar\""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP request object — HttpRequest","title":"HTTP request object — HttpRequest","text":"Create HTTP requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HTTP request object — HttpRequest","text":"R6 class actual HTTP requests HttpClient() - building requests use async HTTP requests AsyncVaried() Note can access HTTP verbs creating HttpRequest object, just can HttpClient. See examples usage. Also note call HTTP verbs HttpRequest object need assign new object variable new details added added object . See HttpClient() information parameters.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"HTTP request object — HttpRequest","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"HTTP request object — HttpRequest","text":"url (character) url opts (list) named list curl options proxies proxy() object auth auth() object headers (list) named list headers, see http-headers handle handle() progress supports httr::progress(), see progress payload resulting payload request","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"HTTP request object — HttpRequest","text":"HttpRequest$print() HttpRequest$new() HttpRequest$get() HttpRequest$post() HttpRequest$put() HttpRequest$patch() HttpRequest$delete() HttpRequest$head() HttpRequest$verb() HttpRequest$retry() HttpRequest$method() HttpRequest$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"HTTP request object — HttpRequest","text":"print method HttpRequest objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"HTTP request object — HttpRequest","text":"Create new HttpRequest object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$new(url, opts, proxies, auth, headers, handle, progress)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"url (character) url. One url handle required. opts curl options proxies proxy() object auth auth() object headers named list headers, see http-headers handle handle() progress supports httr::progress(), see progress urls (character) one URLs","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTP request object — HttpRequest","text":"new HttpRequest object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"HTTP request object — HttpRequest","text":"Define GET request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$get(path = NULL, query = list(), disk = NULL, stream = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL query query terms, named list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"HTTP request object — HttpRequest","text":"Define POST request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$post(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL query query terms, named list body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"HTTP request object — HttpRequest","text":"Define PUT request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$put(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL query query terms, named list body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-patch-","dir":"Reference","previous_headings":"","what":"Method patch()","title":"HTTP request object — HttpRequest","text":"Define PATCH request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$patch(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL query query terms, named list body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"HTTP request object — HttpRequest","text":"Define DELETE request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$delete(   path = NULL,   query = list(),   body = NULL,   disk = NULL,   stream = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL query query terms, named list body body R list disk path write . NULL (default), memory used. See curl::curl_fetch_disk() help. stream R function determine stream data. NULL (default), memory used. See curl::curl_fetch_stream() help encode one form, multipart, json, raw ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"HTTP request object — HttpRequest","text":"Define HEAD request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$head(path = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"path URL path, appended base URL ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-verb-","dir":"Reference","previous_headings":"","what":"Method verb()","title":"HTTP request object — HttpRequest","text":"Use arbitrary HTTP verb supported class Supported verbs: get, post, put, patch, delete, head","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$verb(verb, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"verb HTTP verb supported class: get, post, put, patch, delete, head. Also supports retry. ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP request object — HttpRequest","text":"","code":"z <- HttpRequest$new(url = \"https://hb.opencpu.org/get\") res <- z$verb('get', query = list(hello = \"world\")) res$payload"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-retry-","dir":"Reference","previous_headings":"","what":"Method retry()","title":"HTTP request object — HttpRequest","text":"Define RETRY request","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$retry(   verb,   ...,   pause_base = 1,   pause_cap = 60,   pause_min = 1,   times = 3,   terminate_on = NULL,   retry_only_on = NULL,   onwait = NULL )"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"verb HTTP verb supported class: get, post, put, patch, delete, head. Also supports retry. ... curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest pause_base, pause_cap, pause_min basis, maximum, minimum calculating wait time retry. Wait time calculated according exponential backoff full jitter algorithm. Specifically, wait time chosen randomly pause_min lesser pause_base * 2 pause_cap, pause_base doubling subsequent retry attempt. Use pause_cap = Inf terminate retrying due cap wait time reached. times maximum number times retry. Set Inf stop retrying due exhausting number attempts. terminate_on, retry_only_on vector HTTP status codes. terminate_on, status codes terminate retrying, retry_only_on, status codes retry request. onwait callback function request retried wait time applied. function passed two parameters, response object failed request, wait time seconds. Note time spent function effectively adds wait time, kept simple.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-method-","dir":"Reference","previous_headings":"","what":"Method method()","title":"HTTP request object — HttpRequest","text":"Get HTTP method (defined)","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$method()"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"HTTP request object — HttpRequest","text":"(character) HTTP method","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"HTTP request object — HttpRequest","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP request object — HttpRequest","text":"","code":"HttpRequest$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP request object — HttpRequest","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpRequest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP request object — HttpRequest","text":"","code":"if (FALSE) { x <- HttpRequest$new(url = \"https://hb.opencpu.org/get\") ## note here how the HTTP method is shown on the first line to the right x$get()  ## assign to a new object to keep the output z <- x$get() ### get the HTTP method z$method()  (x <- HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get()) x$url x$payload  (x <- HttpRequest$new(url = \"https://hb.opencpu.org/post\")) x$post(body = list(foo = \"bar\"))  HttpRequest$new(   url = \"https://hb.opencpu.org/get\",   headers = list(     `Content-Type` = \"application/json\"   ) )  # retry (x <- HttpRequest$new(url = \"https://hb.opencpu.org/post\")) x$retry(\"post\", body = list(foo = \"bar\")) }  ## ------------------------------------------------ ## Method `HttpRequest$verb` ## ------------------------------------------------  z <- HttpRequest$new(url = \"https://hb.opencpu.org/get\") res <- z$verb('get', query = list(hello = \"world\")) res$payload #> $url #> $url$url #> [1] \"https://hb.opencpu.org/get?hello=world\" #>  #> $url$handle #> <curl handle> (https://hb.opencpu.org/get?hello=world) #>  #>  #> $method #> [1] \"get\" #>  #> $options #> $options$httpget #> [1] TRUE #>  #>  #> $headers #> $headers$`Accept-Encoding` #> [1] \"gzip, deflate\" #>  #> $headers$Accept #> [1] \"application/json, text/xml, application/xml, */*\" #>  #>"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":null,"dir":"Reference","previous_headings":"","what":"Base HTTP response object — HttpResponse","title":"Base HTTP response object — HttpResponse","text":"Class methods handling HTTP responses","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Base HTTP response object — HttpResponse","text":"Additional Methods raise_for_ct(type, charset = NULL, behavior = \"stop\") Check response content-type; stop warn matched. Parameters: type: (character) mime type match ; see mime::mimemap allowed values charset: (character) charset string given, check matches charset content type header. default: NULL behavior: (character) one stop (default) warning raise_for_ct_html(charset = NULL, behavior = \"stop\") Check response content-type text/html; stop warn matched. Parameters: see raise_for_ct() raise_for_ct_json(charset = NULL, behavior = \"stop\") Check response content-type application/json; stop warn matched. Parameters: see raise_for_ct() raise_for_ct_xml(charset = NULL, behavior = \"stop\") Check response content-type application/xml; stop warn matched. Parameters: see raise_for_ct()","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"Base HTTP response object — HttpResponse","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Base HTTP response object — HttpResponse","text":"method (character) one URLs url (character) one URLs opts (character) one URLs handle (character) one URLs status_code (character) one URLs request_headers (character) one URLs response_headers (character) one URLs response_headers_all (character) one URLs modified (character) one URLs times (character) one URLs content (character) one URLs request (character) one URLs raise_for_ct ct method (general) raise_for_ct_html ct method (html) raise_for_ct_json ct method (json) raise_for_ct_xml ct method (xml)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base HTTP response object — HttpResponse","text":"HttpResponse$print() HttpResponse$new() HttpResponse$parse() HttpResponse$success() HttpResponse$status_http() HttpResponse$raise_for_status() HttpResponse$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Base HTTP response object — HttpResponse","text":"print method HttpResponse objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base HTTP response object — HttpResponse","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Base HTTP response object — HttpResponse","text":"Create new HttpResponse object","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$new(   method,   url,   opts,   handle,   status_code,   request_headers,   response_headers,   response_headers_all,   modified,   times,   content,   request )"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base HTTP response object — HttpResponse","text":"method (character) HTTP method url (character) url, required opts (list) curl options handle handle status_code (integer) status code request_headers (list) request headers, named list response_headers (list) response headers, named list response_headers_all (list) response headers, including intermediate redirect headers, unnamed list named lists modified (character) modified date times (vector) named vector content (raw) raw binary content response request request object, details","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"Base HTTP response object — HttpResponse","text":"Parse raw response content text","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$parse(encoding = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base HTTP response object — HttpResponse","text":"encoding (character) character string describing current encoding. left NULL, attempt guess encoding. Passed parameter iconv ... additional parameters passed iconv (options: sub, mark, toRaw). See ?iconv help","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Base HTTP response object — HttpResponse","text":"character string","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-success-","dir":"Reference","previous_headings":"","what":"Method success()","title":"Base HTTP response object — HttpResponse","text":"status code less equal 201","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$success()"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Base HTTP response object — HttpResponse","text":"boolean","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-status-http-","dir":"Reference","previous_headings":"","what":"Method status_http()","title":"Base HTTP response object — HttpResponse","text":"Get HTTP status code, message, explanation","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$status_http(verbose = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base HTTP response object — HttpResponse","text":"verbose (logical) whether get verbose http status description, default: FALSE","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Base HTTP response object — HttpResponse","text":"object class \"http_code\", list slots status_code, message, explanation","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-raise-for-status-","dir":"Reference","previous_headings":"","what":"Method raise_for_status()","title":"Base HTTP response object — HttpResponse","text":"Check HTTP status stop appropriate HTTP error code message >= 300. otherwise use httpcode. fauxpas installed use .","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$raise_for_status()"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Base HTTP response object — HttpResponse","text":"stop warn message","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base HTTP response object — HttpResponse","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Base HTTP response object — HttpResponse","text":"","code":"HttpResponse$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base HTTP response object — HttpResponse","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/HttpResponse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Base HTTP response object — HttpResponse","text":"","code":"if (FALSE) { x <- HttpResponse$new(method = \"get\", url = \"https://hb.opencpu.org\") x$url x$method  x <- HttpClient$new(url = 'https://hb.opencpu.org') (res <- x$get('get')) res$request_headers res$response_headers res$parse() res$status_code res$status_http() res$status_http()$status_code res$status_http()$message res$status_http()$explanation res$success()  x <- HttpClient$new(url = 'https://hb.opencpu.org/status/404') (res <- x$get()) # res$raise_for_status()  x <- HttpClient$new(url = 'https://hb.opencpu.org/status/414') (res <- x$get()) # res$raise_for_status() }"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":null,"dir":"Reference","previous_headings":"","what":"Paginator client — Paginator","title":"Paginator client — Paginator","text":"client help paginate","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Paginator client — Paginator","text":"list, objects class HttpResponse(). Responses returned order passed .","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Paginator client — Paginator","text":"See HttpClient() information parameters","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"r-classes","dir":"Reference","previous_headings":"","what":"R6 classes","title":"Paginator client — Paginator","text":"R6 class package R6. Find R6 https://r6.r-lib.org/. creating instance R6 class (e.g., x <- HttpClient$new(url = \"https://hb.opencpu.org\")) can access values methods object x.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"methods-to-paginate","dir":"Reference","previous_headings":"","what":"Methods to paginate","title":"Paginator client — Paginator","text":"Supported now: limit_offset: common way (experience), default. method involves setting many records record start request. send query parameters . page_perpage: set page fetch (optionally) many records get per page Supported later, hopefully: link_headers: link headers URLS next/previous/last request given response header server. relatively uncommon, though recommended JSONAPI implemented well known API (GitHub). cursor: works single string given back response, passed subsequent response, records remain. common Solr","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Paginator client — Paginator","text":"http_req object class HttpClient (character) paginate. 'limit_offset' supported now. future support 'link_headers' 'cursor'. See Details. chunk (numeric/integer) number chunk requests, e.g., 10 request gets 10 records. number passed format() prevent larger numbers scientifically formatted limit_param (character) name limit parameter. Default: limit offset_param (character) name offset parameter. Default: offset limit (numeric/integer) maximum records wanted. number passed format() prevent larger numbers scientifically formatted page_param (character) name page parameter. Default: NULL per_page_param (character) name per page parameter. Default: NULL progress (logical) print progress bar, using utils::txtProgressBar. Default: FALSE.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Paginator client — Paginator","text":"Paginator$print() Paginator$new() Paginator$get() Paginator$post() Paginator$put() Paginator$patch() Paginator$delete() Paginator$head() Paginator$responses() Paginator$status_code() Paginator$status() Paginator$parse() Paginator$content() Paginator$times() Paginator$url_fetch() Paginator$clone()","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Paginator client — Paginator","text":"print method Paginator objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$print(x, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"x self ... ignored","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Paginator client — Paginator","text":"Create new Paginator object","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$new(   client,   by = \"limit_offset\",   limit_param = NULL,   offset_param = NULL,   limit = NULL,   chunk = NULL,   page_param = NULL,   per_page_param = NULL,   progress = FALSE )"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"client object class HttpClient, call HttpClient (character) paginate. 'limit_offset' supported now. future support 'link_headers' 'cursor'. See Details. limit_param (character) name limit parameter. Default: limit offset_param (character) name offset parameter. Default: offset limit (numeric/integer) maximum records wanted chunk (numeric/integer) number chunk requests, e.g., 10 request gets 10 records page_param (character) name page parameter. per_page_param (character) name per page parameter. progress (logical) print progress bar, using utils::txtProgressBar. Default: FALSE.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"new Paginator object","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Paginator client — Paginator","text":"make paginated GET request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$get(path = NULL, query = list(), ...)"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-post-","dir":"Reference","previous_headings":"","what":"Method post()","title":"Paginator client — Paginator","text":"make paginated POST request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$post(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-put-","dir":"Reference","previous_headings":"","what":"Method put()","title":"Paginator client — Paginator","text":"make paginated PUT request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$put(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-patch-","dir":"Reference","previous_headings":"","what":"Method patch()","title":"Paginator client — Paginator","text":"make paginated PATCH request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$patch(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-delete-","dir":"Reference","previous_headings":"","what":"Method delete()","title":"Paginator client — Paginator","text":"make paginated DELETE request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$delete(   path = NULL,   query = list(),   body = NULL,   encode = \"multipart\",   ... )"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted body body R list encode one form, multipart, json, raw ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-head-","dir":"Reference","previous_headings":"","what":"Method head()","title":"Paginator client — Paginator","text":"make paginated HEAD request","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$head(path = NULL, ...)"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL ... retry, options passed method implementing requested verb, including curl options. Otherwise, curl options, acceptable set curl::curl_options() except following: httpget, httppost, post, postfields, postfieldsize, customrequest","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Paginator client — Paginator","text":"sure makes sense yet","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-responses-","dir":"Reference","previous_headings":"","what":"Method responses()","title":"Paginator client — Paginator","text":"list responses","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$responses()"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"list HttpResponse objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-status-code-","dir":"Reference","previous_headings":"","what":"Method status_code()","title":"Paginator client — Paginator","text":"Get HTTP status codes response","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$status_code()"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"numeric vector, empty numeric vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-status-","dir":"Reference","previous_headings":"","what":"Method status()","title":"Paginator client — Paginator","text":"List HTTP status objects","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$status()"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"list http_code objects, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"Paginator client — Paginator","text":"parse content","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$parse(encoding = \"UTF-8\")"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"encoding (character) encoding use parsing. default:\"UTF-8\"","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"character vector, empty character vector requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-content-","dir":"Reference","previous_headings":"","what":"Method content()","title":"Paginator client — Paginator","text":"Get raw content response","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$content()"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"raw list, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-times-","dir":"Reference","previous_headings":"","what":"Method times()","title":"Paginator client — Paginator","text":"curl request times","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$times()"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"list named numeric vectors, empty list requests made","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-url-fetch-","dir":"Reference","previous_headings":"","what":"Method url_fetch()","title":"Paginator client — Paginator","text":"get URL sent (.e., executing request) things change URL path query parameters; body curl options change URL","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$url_fetch(path = NULL, query = list())"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"path URL path, appended base URL query query terms, named list. numeric values passed format() prevent larger numbers scientifically formatted","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Paginator client — Paginator","text":"URLs (character)","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paginator client — Paginator","text":"","code":"\\dontrun{ cli <- HttpClient$new(url = \"https://api.crossref.org\") cc <- Paginator$new(client = cli, limit_param = \"rows\",    offset_param = \"offset\", limit = 50, chunk = 10) cc$url_fetch('works') cc$url_fetch('works', query = list(query = \"NSF\")) }"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Paginator client — Paginator","text":"objects class cloneable method.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Paginator client — Paginator","text":"","code":"Paginator$clone(deep = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paginator client — Paginator","text":"deep Whether make deep clone.","code":""},{"path":"https://docs.ropensci.org/crul/reference/Paginator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Paginator client — Paginator","text":"","code":"if (FALSE) { if (interactive()) { # limit/offset approach con <- HttpClient$new(url = \"https://api.crossref.org\") cc <- Paginator$new(client = con, limit_param = \"rows\",    offset_param = \"offset\", limit = 50, chunk = 10) cc cc$get('works') cc cc$responses() cc$status() cc$status_code() cc$times() # cc$content() cc$parse() lapply(cc$parse(), jsonlite::fromJSON)  # page/per page approach (with no per_page param allowed) conn <- HttpClient$new(url = \"https://discuss.ropensci.org\") cc <- Paginator$new(client = conn, by = \"page_perpage\",  page_param = \"page\", per_page_param = \"per_page\", limit = 90, chunk = 30) cc cc$get('c/usecases/l/latest.json') cc$responses() lapply(cc$parse(), jsonlite::fromJSON)  # page/per_page conn <- HttpClient$new('https://api.inaturalist.org') cc <- Paginator$new(conn, by = \"page_perpage\", page_param = \"page\",  per_page_param = \"per_page\", limit = 90, chunk = 30) cc cc$get('v1/observations', query = list(taxon_name=\"Helianthus\")) cc$responses() res <- lapply(cc$parse(), jsonlite::fromJSON) res[[1]]$total_results vapply(res, \"[[\", 1L, \"page\") vapply(res, \"[[\", 1L, \"per_page\") vapply(res, function(w) NROW(w$results), 1L) ## another ccc <- Paginator$new(conn, by = \"page_perpage\", page_param = \"page\",  per_page_param = \"per_page\", limit = 500, chunk = 30, progress = TRUE) ccc ccc$get('v1/observations', query = list(taxon_name=\"Helianthus\")) res2 <- lapply(ccc$parse(), jsonlite::fromJSON) vapply(res2, function(w) NROW(w$results), 1L)  # progress bar (con <- HttpClient$new(url = \"https://api.crossref.org\")) cc <- Paginator$new(client = con, limit_param = \"rows\",    offset_param = \"offset\", limit = 50, chunk = 10,    progress = TRUE) cc cc$get('works') }}  ## ------------------------------------------------ ## Method `Paginator$url_fetch` ## ------------------------------------------------  if (FALSE) { cli <- HttpClient$new(url = \"https://api.crossref.org\") cc <- Paginator$new(client = cli, limit_param = \"rows\",    offset_param = \"offset\", limit = 50, chunk = 10) cc$url_fetch('works') cc$url_fetch('works', query = list(query = \"NSF\")) }"},{"path":"https://docs.ropensci.org/crul/reference/auth.html","id":null,"dir":"Reference","previous_headings":"","what":"Authentication — auth","title":"Authentication — auth","text":"Authentication","code":""},{"path":"https://docs.ropensci.org/crul/reference/auth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authentication — auth","text":"","code":"auth(user, pwd, auth = \"basic\")"},{"path":"https://docs.ropensci.org/crul/reference/auth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authentication — auth","text":"user (character) username, required. see Details. pwd (character) password, required. see Details. auth (character) authentication type, one basic (default), digest, digest_ie, gssnegotiate, ntlm, . required","code":""},{"path":"https://docs.ropensci.org/crul/reference/auth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Authentication — auth","text":"supporting simple auth now, OAuth later maybe. user pwd required pass value. value can NULL - equivalent passing empty string like \"\" httr::authenticate. may want pass NULL user pwd example using gssnegotiate auth type. See example .","code":""},{"path":"https://docs.ropensci.org/crul/reference/auth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authentication — auth","text":"","code":"auth(user = \"foo\", pwd = \"bar\", auth = \"basic\") #> $userpwd #> [1] \"foo:bar\" #>  #> $httpauth #> [1] 1 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"basic\" auth(user = \"foo\", pwd = \"bar\", auth = \"digest\") #> $userpwd #> [1] \"foo:bar\" #>  #> $httpauth #> [1] 2 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"digest\" auth(user = \"foo\", pwd = \"bar\", auth = \"ntlm\") #> $userpwd #> [1] \"foo:bar\" #>  #> $httpauth #> [1] 8 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"ntlm\" auth(user = \"foo\", pwd = \"bar\", auth = \"any\") #> $userpwd #> [1] \"foo:bar\" #>  #> $httpauth #> [1] -17 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"any\"  # gssnegotiate auth auth(NULL, NULL, \"gssnegotiate\") #> $httpauth #> [1] 4 #>  #> attr(,\"class\") #> [1] \"auth\" #> attr(,\"type\") #> [1] \"gssnegotiate\"  if (FALSE) { # with HttpClient (res <- HttpClient$new(   url = \"https://hb.opencpu.org/basic-auth/user/passwd\",   auth = auth(user = \"user\", pwd = \"passwd\") )) res$auth x <- res$get() jsonlite::fromJSON(x$parse(\"UTF-8\"))  # with HttpRequest (res <- HttpRequest$new(   url = \"https://hb.opencpu.org/basic-auth/user/passwd\",   auth = auth(user = \"user\", pwd = \"passwd\") )) res$auth }"},{"path":"https://docs.ropensci.org/crul/reference/content-types.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with content types — content-types","title":"Working with content types — content-types","text":"HttpResponse class holds responses elements HTTP request. document details work specifically content-type response headers","code":""},{"path":"https://docs.ropensci.org/crul/reference/content-types.html","id":"content-types","dir":"Reference","previous_headings":"","what":"Content types","title":"Working with content types — content-types","text":"\"Content-Type\" header HTTP responses gives media type response. media type data format data intended processed recipient. (modified rfc7231)","code":""},{"path":"https://docs.ropensci.org/crul/reference/content-types.html","id":"behavior-of-the-parameters-httpresponse-raise-for-ct-methods","dir":"Reference","previous_headings":"","what":"Behavior of the parameters HttpResponse raise_for_ct* methods","title":"Working with content types — content-types","text":"type: (applicable raise_for_ct() method): instead using one three content type methods html, json, xml, can specify mime type check, mime::mimemap charset: give value parameter, check content type expect; , charset, given, ignored. behavior: default call method, content type match method expects, run stop() message. Instead stopping, can choose behavior=\"warning\" throw warning instead, allowing downstream processing proceed.","code":""},{"path":"https://docs.ropensci.org/crul/reference/content-types.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Working with content types — content-types","text":"spec content types: https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.5 spec media types: https://datatracker.ietf.org/doc/html/rfc7231#section-3.1.1.1","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/content-types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with content types — content-types","text":"","code":"if (FALSE) { (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) (res <- x$get())  ## see the content type res$response_headers  ## check that the content type is text/html res$raise_for_ct_html()  ## it's def. not json # res$raise_for_ct_json()  ## give custom content type res$raise_for_ct(\"text/html\") # res$raise_for_ct(\"application/json\") # res$raise_for_ct(\"foo/bar\")  ## check charset in addition to the media type res$raise_for_ct_html(charset = \"utf-8\") # res$raise_for_ct_html(charset = \"utf-16\")  # warn instead of stop res$raise_for_ct_json(behavior = \"warning\") }"},{"path":"https://docs.ropensci.org/crul/reference/cookies.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with cookies — cookies","title":"Working with cookies — cookies","text":"Working cookies","code":""},{"path":"https://docs.ropensci.org/crul/reference/cookies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with cookies — cookies","text":"","code":"if (FALSE) { x <- HttpClient$new(   url = \"https://hb.opencpu.org\",   opts = list(     cookie = \"c=1;f=5\",     verbose = TRUE   ) ) x  # set cookies (res <- x$get(\"cookies\")) jsonlite::fromJSON(res$parse(\"UTF-8\"))  (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) res <- x$get(\"cookies/set\", query = list(foo = 123, bar = \"ftw\")) jsonlite::fromJSON(res$parse(\"UTF-8\")) curl::handle_cookies(handle = res$handle)  # reuse handle res2 <- x$get(\"get\", query = list(hello = \"world\")) jsonlite::fromJSON(res2$parse(\"UTF-8\")) curl::handle_cookies(handle = res2$handle)  # DOAJ x <- HttpClient$new(url = \"https://doaj.org\") res <- x$get(\"api/v1/journals/f3f2e7f23d444370ae5f5199f85bc100\",   verbose = TRUE) res$response_headers$`set-cookie` curl::handle_cookies(handle = res$handle) res2 <- x$get(\"api/v1/journals/9abfb36b06404e8a8566e1a44180bbdc\",   verbose = TRUE)  ## reset handle x$handle_pop() ## cookies no longer sent, as handle reset res2 <- x$get(\"api/v1/journals/9abfb36b06404e8a8566e1a44180bbdc\",   verbose = TRUE) }"},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set curl options, proxy, and basic auth — crul-options","title":"Set curl options, proxy, and basic auth — crul-options","text":"Set curl options, proxy, basic auth","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set curl options, proxy, and basic auth — crul-options","text":"","code":"set_opts(...)  set_verbose()  set_proxy(x)  set_auth(x)  set_headers(...)  crul_settings(reset = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set curl options, proxy, and basic auth — crul-options","text":"... set_opts() curl option set curl::curl_options(). set_headers() named list headers x set_proxy() proxy object made proxy(). set_auth() auth object made auth() reset (logical) reset settings (aka, delete ). Default: FALSE","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set curl options, proxy, and basic auth — crul-options","text":"set_opts(): set curl options; supports options curl::curl_options() set_verbose(): set custom curl verbose; sets verbose=TRUE debugfunction callback result curl_verbose() set_proxy(): set proxy settings, accepts proxy() set_auth(): set authorization, accepts auth() set_headers(): set request headers, named list crul_settings(): list settigns set via functions","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set curl options, proxy, and basic auth — crul-options","text":"mock option seen output crul_settings() set via function mock()","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set curl options, proxy, and basic auth — crul-options","text":"","code":"if (interactive()) { # get settings crul_settings()  # curl options set_opts(timeout_ms = 1000) crul_settings() set_opts(timeout_ms = 4000) crul_settings() set_opts(verbose = TRUE) crul_settings() if (FALSE) { HttpClient$new('https://hb.opencpu.org')$get('get') } # set_verbose - sets: `verbose=TRUE`, and `debugfunction` to  # result of call to `curl_verbose()`, see `?curl_verbose` set_verbose() crul_settings()  # basic authentication set_auth(auth(user = \"foo\", pwd = \"bar\", auth = \"basic\")) crul_settings()  # proxies set_proxy(proxy(\"http://97.77.104.22:3128\")) crul_settings()  # headers crul_settings(TRUE) # reset first set_headers(foo = \"bar\") crul_settings() set_headers(`User-Agent` = \"hello world\") crul_settings() if (FALSE) { set_opts(verbose = TRUE) HttpClient$new('https://hb.opencpu.org')$get('get') }  # reset crul_settings(TRUE) crul_settings()  # works with async functions ## Async set_opts(verbose = TRUE) cc <- Async$new(urls = c(     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar')) (res <- cc$get())  ## AsyncVaried set_opts(verbose = TRUE) set_headers(stuff = \"things\") reqlist <- list(   HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get(),   HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post()) out <- AsyncVaried$new(.list = reqlist) out$request() }"},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":null,"dir":"Reference","previous_headings":"","what":"crul — crul-package","title":"crul — crul-package","text":"HTTP R client","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"package-api","dir":"Reference","previous_headings":"","what":"Package API","title":"crul — crul-package","text":"HttpClient() - create connection client, set http options, make http requests HttpResponse() - mostly internal use, handles http responses Paginator() - auto-paginate requests Async() - asynchronous requests AsyncVaried() - varied asynchronous requests HttpRequest() - generate HTTP request, mostly use building requests used Async AsyncVaried mock() - Turn /mocking, via webmockr auth() - Simple authentication helper proxy() - Proxy helper upload() - File upload helper set curl options globally: set_auth(), set_headers(), set_opts(), set_proxy(), crul_settings()","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"http-verbs-or-http-request-methods-","dir":"Reference","previous_headings":"","what":"HTTP verbs (or HTTP request methods)","title":"crul — crul-package","text":"See verb-GET, verb-POST, verb-PUT, verb-PATCH, verb-DELETE, verb-HEAD details. HttpClient main interface making HTTP requests, includes methods HTTP verb HttpRequest allows prepare HTTP payload use AsyncVaried, provides asynchronous requests varied HTTP methods Async provides asynchronous requests single HTTP method time verb() method can used request specific HTTP verb","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"checking-http-responses","dir":"Reference","previous_headings":"","what":"Checking HTTP responses","title":"crul — crul-package","text":"HttpResponse() helpers checking raising warnings/errors. content-types details various options checking content types throwing warning error response content type match expect. Mis-matched content-types typically good sign bad response. methods built json, xml html, ability set custom content type raise_for_status() method HttpResponse() checks HTTP status code, errors appropriate message HTTP status code, optionally using package fauxpas installed.","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"http-conditions","dir":"Reference","previous_headings":"","what":"HTTP conditions","title":"crul — crul-package","text":"use fauxpas installed handling HTTP conditions installed use httpcode","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"mocking","dir":"Reference","previous_headings":"","what":"Mocking","title":"crul — crul-package","text":"Mocking HTTP requests supported via webmockr package. See mock guidance, https://books.ropensci.org/http-testing/","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"caching","dir":"Reference","previous_headings":"","what":"Caching","title":"crul — crul-package","text":"Caching HTTP requests supported via vcr package. See https://books.ropensci.org/http-testing/","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"links","dir":"Reference","previous_headings":"","what":"Links","title":"crul — crul-package","text":"Source code: https://github.com/ropensci/crul Bug reports/feature requests: https://github.com/ropensci/crul/issues","code":""},{"path":"https://docs.ropensci.org/crul/reference/crul-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"crul — crul-package","text":"Scott Chamberlain myrmecocystus@gmail.com","code":""},{"path":"https://docs.ropensci.org/crul/reference/curl-options.html","id":null,"dir":"Reference","previous_headings":"","what":"curl options — curl-options","title":"curl options — curl-options","text":"opts parameter can pass various curl options, including user agent string, whether get verbose curl output , setting timeout requests, . See curl::curl_options() options can use. Note need give curl options exactly given curl::curl_options().","code":""},{"path":"https://docs.ropensci.org/crul/reference/curl-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"curl options — curl-options","text":"","code":"if (FALSE) { url <- \"https://hb.opencpu.org\"  # set curl options on client initialization (res <- HttpClient$new(url = url, opts = list(verbose = TRUE))) res$opts res$get('get')  # or set curl options when performing HTTP operation (res <- HttpClient$new(url = url)) res$get('get', verbose = TRUE) res$get('get', stuff = \"things\")  # set a timeout (res <- HttpClient$new(url = url, opts = list(timeout_ms = 1))) # res$get('get')  # set user agent either as a header or an option HttpClient$new(url = url,   headers = list(`User-Agent` = \"hello world\"),   opts = list(verbose = TRUE) )$get('get')  HttpClient$new(url = url,   opts = list(verbose = TRUE, useragent = \"hello world\") )$get('get')  # You can also set custom debug function via the verbose  # parameter when calling `$new()` res <- HttpClient$new(url, verbose=curl_verbose()) res res$get(\"get\") res <- HttpClient$new(url, verbose=curl_verbose(data_in=TRUE)) res$get(\"get\") res <- HttpClient$new(url, verbose=curl_verbose(info=TRUE)) res$get(\"get\") }"},{"path":"https://docs.ropensci.org/crul/reference/curl_verbose.html","id":null,"dir":"Reference","previous_headings":"","what":"curl verbose method — curl_verbose","title":"curl verbose method — curl_verbose","text":"curl verbose method","code":""},{"path":"https://docs.ropensci.org/crul/reference/curl_verbose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"curl verbose method — curl_verbose","text":"","code":"curl_verbose(data_out = TRUE, data_in = FALSE, info = FALSE, ssl = FALSE)"},{"path":"https://docs.ropensci.org/crul/reference/curl_verbose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"curl verbose method — curl_verbose","text":"data_out Show data sent server data_in Show data recieved server info Show informational text curl. mainly useful debugging https auth problems, disabled default ssl Show even data sent/recieved SSL connections?","code":""},{"path":"https://docs.ropensci.org/crul/reference/curl_verbose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"curl verbose method — curl_verbose","text":"line prefixes: * informative curl messages => headers sent () > data sent () *> ssl data sent () <= headers received () < data received () <* ssl data received ()","code":""},{"path":"https://docs.ropensci.org/crul/reference/curl_verbose.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"curl verbose method — curl_verbose","text":"adapted httr::verbose","code":""},{"path":"https://docs.ropensci.org/crul/reference/handle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a handle — handle","title":"Make a handle — handle","text":"Make handle","code":""},{"path":"https://docs.ropensci.org/crul/reference/handle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a handle — handle","text":"","code":"handle(url, ...)"},{"path":"https://docs.ropensci.org/crul/reference/handle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a handle — handle","text":"url (character) url. required. ... options passed curl::new_handle()","code":""},{"path":"https://docs.ropensci.org/crul/reference/handle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a handle — handle","text":"","code":"handle(\"https://hb.opencpu.org\") #> $url #> [1] \"https://hb.opencpu.org\" #>  #> $handle #> <curl handle> (empty) #>   # handles - pass in your own handle if (FALSE) { h <- handle(\"https://hb.opencpu.org\") (res <- HttpClient$new(handle = h)) out <- res$get(\"get\") }"},{"path":"https://docs.ropensci.org/crul/reference/hooks.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Hooks — hooks","title":"Event Hooks — hooks","text":"Trigger functions run requests /responses. See Details .","code":""},{"path":"https://docs.ropensci.org/crul/reference/hooks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Event Hooks — hooks","text":"Functions passed request run request occurs. meaning triggering function request can things request object. Functions passed response run request done, response object created. meaning triggering function response things response object. request response applies whether make real HTTP requests mock webmockr.","code":""},{"path":"https://docs.ropensci.org/crul/reference/hooks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Event Hooks — hooks","text":"supported HttpClient now","code":""},{"path":"https://docs.ropensci.org/crul/reference/hooks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event Hooks — hooks","text":"","code":"if (FALSE) { # hooks on the request fun_req <- function(request) {   cat(paste0(\"Requesting: \", request$url$url), sep = \"\\n\") } (x <- HttpClient$new(url = \"https://hb.opencpu.org\",   hooks = list(request = fun_req))) x$hooks x$hooks$request r1 <- x$get('get')  captured_req <- list() fun_req2 <- function(request) {   cat(\"Capturing Request\", sep = \"\\n\")   captured_req <<- request } (x <- HttpClient$new(url = \"https://hb.opencpu.org\",   hooks = list(request = fun_req2))) x$hooks x$hooks$request r1 <- x$get('get') captured_req    # hooks on the response fun_resp <- function(response) {   cat(paste0(\"status_code: \", response$status_code), sep = \"\\n\") } (x <- HttpClient$new(url = \"https://hb.opencpu.org\",   hooks = list(response = fun_resp))) x$url x$hooks r1 <- x$get('get')  # both (x <- HttpClient$new(url = \"https://hb.opencpu.org\",   hooks = list(request = fun_req, response = fun_resp))) x$get(\"get\") }"},{"path":"https://docs.ropensci.org/crul/reference/http-headers.html","id":null,"dir":"Reference","previous_headings":"","what":"Working with HTTP headers — http-headers","title":"Working with HTTP headers — http-headers","text":"Working HTTP headers","code":""},{"path":"https://docs.ropensci.org/crul/reference/http-headers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Working with HTTP headers — http-headers","text":"","code":"if (FALSE) { (x <- HttpClient$new(url = \"https://hb.opencpu.org\"))  # set headers (res <- HttpClient$new(   url = \"https://hb.opencpu.org\",   opts = list(     verbose = TRUE   ),   headers = list(     a = \"stuff\",     b = \"things\"   ) )) res$headers # reassign header value res$headers$a <- \"that\" # define new header res$headers$c <- \"what\" # request res$get('get')  ## setting content-type via headers (res <- HttpClient$new(   url = \"https://hb.opencpu.org\",   opts = list(     verbose = TRUE   ),   headers = list(`Content-Type` = \"application/json\") )) res$get('get') }"},{"path":"https://docs.ropensci.org/crul/reference/mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Mocking HTTP requests — mock","title":"Mocking HTTP requests — mock","text":"Mocking HTTP requests","code":""},{"path":"https://docs.ropensci.org/crul/reference/mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mocking HTTP requests — mock","text":"","code":"mock(on = TRUE)"},{"path":"https://docs.ropensci.org/crul/reference/mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mocking HTTP requests — mock","text":"(logical) turn mocking TRUE turn FALSE. default FALSE","code":""},{"path":"https://docs.ropensci.org/crul/reference/mock.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mocking HTTP requests — mock","text":"webmockr package required mocking behavior","code":""},{"path":"https://docs.ropensci.org/crul/reference/mock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mocking HTTP requests — mock","text":"","code":"if (FALSE) {  if (interactive()) {   # load webmockr   library(webmockr)   library(crul)    URL <- \"https://hb.opencpu.org\"    # turn on mocking   crul::mock()    # stub a request   stub_request(\"get\", file.path(URL, \"get\"))   webmockr:::webmockr_stub_registry    # create an HTTP client   (x <- HttpClient$new(url = URL))    # make a request - matches stub - no real request made   x$get('get')    # allow net connect   webmockr::webmockr_allow_net_connect()   x$get('get', query = list(foo = \"bar\"))   webmockr::webmockr_disable_net_connect()   x$get('get', query = list(foo = \"bar\")) }  }"},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":null,"dir":"Reference","previous_headings":"","what":"check if a url is okay — ok","title":"check if a url is okay — ok","text":"check url okay","code":""},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check if a url is okay — ok","text":"","code":"ok(x, status = 200L, info = TRUE, verb = \"head\", ua_random = FALSE, ...)"},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check if a url is okay — ok","text":"x either URL character string, object class HttpClient status (integer) one HTTP status codes, must integers. default: 200L, since common signal URL okay, may cases URL okay 201L, status code. info (logical) case error, want message() ? Default: TRUE verb (character) use \"head\" (default) \"get\" HTTP verb request. note \"get\" take longer returns body. however, \"verb=get\" may option url blocks head requests ua_random (logical) use random user agent string? default: TRUE. set useragent curl option override setting. random user agent string pulled vector 50 user agent strings generated charlatan::UserAgentProvider (executing replicate(30, UserAgentProvider$new()$user_agent())) ... args passed HttpClient","code":""},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check if a url is okay — ok","text":"single boolean, TRUE URL okay, FALSE ; , see Details","code":""},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check if a url is okay — ok","text":"internally verify status integer known set HTTP status codes, info boolean may fiddle parameters ok() well curl options get \"right answer\". think incorrectly getting FALSE, first thing pass verbose=TRUE ok(). give verbose curl output help determine issue may . different scenarios: site blocks head requests: sites , try verb=\"get\" hard determine site requires , worth trying random useragent string, e.g., ok(useragent = \"foobar\") sites reachable get 403 Unauthorized error, nothing can case access possible get weird HTTP status code, e.g., LinkedIn gives 999 code, trying prevent programmatic access FALSE result may incorrect depending use case. example, want know curl based scraping work without fiddling curl options, FALSE probably correct, want fiddle curl options, first step send verbose=TRUE see whats going redirects headers. can set headers, user agent strings, etc. get closer request want know . Note user agent string always passed default, may one want.","code":""},{"path":"https://docs.ropensci.org/crul/reference/ok.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check if a url is okay — ok","text":"","code":"if (FALSE) { # 200 ok(\"https://www.google.com\")  # 200 ok(\"https://hb.opencpu.org/status/200\") # more than one status ok(\"https://www.google.com\", status = c(200L, 202L)) # 404 ok(\"https://hb.opencpu.org/status/404\") # doesn't exist ok(\"https://stuff.bar\") # doesn't exist ok(\"stuff\")  # use get verb instead of head ok(\"http://animalnexus.ca\") ok(\"http://animalnexus.ca\", verb = \"get\")  # some urls will require a different useragent string # they probably regex the useragent string ok(\"https://doi.org/10.1093/chemse/bjq042\") ok(\"https://doi.org/10.1093/chemse/bjq042\", verb = \"get\", useragent = \"foobar\")  # with random user agent's ## here, use a request hook to print out just the user agent string so  ## we can see what user agent string is being sent off fun_ua <- function(request) {   message(paste0(\"User-agent: \", request$options$useragent), sep = \"\\n\") } z <- crul::HttpClient$new(\"https://doi.org/10.1093/chemse/bjq042\",   hooks = list(request = fun_ua)) z replicate(5, ok(z, ua_random=TRUE), simplify=FALSE) ## if you set useragent option it will override ua_random=TRUE ok(\"https://doi.org/10.1093/chemse/bjq042\", useragent=\"foobar\", ua_random=TRUE)  # with HttpClient z <- crul::HttpClient$new(\"https://hb.opencpu.org/status/404\",   opts = list(verbose = TRUE)) ok(z) }"},{"path":"https://docs.ropensci.org/crul/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"progress bars — progress","title":"progress bars — progress","text":"progress bars","code":""},{"path":"https://docs.ropensci.org/crul/reference/progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"progress bars — progress","text":"pass httr::progress() progress param HttpClient, pulls relevant info pass curl file sizes known get progress bar; file sizes known get bytes downloaded See README examples","code":""},{"path":"https://docs.ropensci.org/crul/reference/proxies.html","id":null,"dir":"Reference","previous_headings":"","what":"proxy options — proxies","title":"proxy options — proxies","text":"proxy options","code":""},{"path":"https://docs.ropensci.org/crul/reference/proxies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"proxy options — proxies","text":"","code":"proxy(url, user = NULL, pwd = NULL, auth = \"basic\")"},{"path":"https://docs.ropensci.org/crul/reference/proxies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"proxy options — proxies","text":"url (character) URL, scheme (http/https), domain port (must numeric). required. user (character) username, optional pwd (character) password, optional auth (character) authentication type, one basic (default), digest, digest_ie, gssnegotiate, ntlm, NULL. optional","code":""},{"path":"https://docs.ropensci.org/crul/reference/proxies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"proxy options — proxies","text":"See https://www.hidemyass.com/proxy list proxies can use","code":""},{"path":"https://docs.ropensci.org/crul/reference/proxies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"proxy options — proxies","text":"","code":"proxy(\"http://97.77.104.22:3128\") #> $proxy #> [1] \"97.77.104.22\" #>  #> $proxyport #> [1] 3128 #>  #> $proxyauth #> [1] 1 #>  #> attr(,\"class\") #> [1] \"proxy\" proxy(\"97.77.104.22:3128\") #> $proxy #> [1] \"97.77.104.22\" #>  #> $proxyport #> [1] 3128 #>  #> $proxyauth #> [1] 1 #>  #> attr(,\"class\") #> [1] \"proxy\" proxy(\"http://97.77.104.22:3128\", \"foo\", \"bar\") #> $proxy #> [1] \"97.77.104.22\" #>  #> $proxyport #> [1] 3128 #>  #> $proxyuserpwd #> [1] \"foo:bar\" #>  #> $proxyauth #> [1] 1 #>  #> attr(,\"class\") #> [1] \"proxy\" proxy(\"http://97.77.104.22:3128\", \"foo\", \"bar\", auth = \"digest\") #> $proxy #> [1] \"97.77.104.22\" #>  #> $proxyport #> [1] 3128 #>  #> $proxyuserpwd #> [1] \"foo:bar\" #>  #> $proxyauth #> [1] 2 #>  #> attr(,\"class\") #> [1] \"proxy\" proxy(\"http://97.77.104.22:3128\", \"foo\", \"bar\", auth = \"ntlm\") #> $proxy #> [1] \"97.77.104.22\" #>  #> $proxyport #> [1] 3128 #>  #> $proxyuserpwd #> [1] \"foo:bar\" #>  #> $proxyauth #> [1] 8 #>  #> attr(,\"class\") #> [1] \"proxy\"  # socks proxy(\"socks5://localhost:9050/\", auth = NULL) #> $proxy #> [1] \"socks5://localhost:9050/\" #>  #> attr(,\"class\") #> [1] \"proxy\"  if (FALSE) { # with proxy (look at request/outgoing headers) # (res <- HttpClient$new( #   url = \"http://www.google.com\", #   proxies = proxy(\"http://97.77.104.22:3128\") # )) # res$proxies # res$get(verbose = TRUE)  # vs. without proxy (look at request/outgoing headers) # (res2 <- HttpClient$new(url = \"http://www.google.com\")) # res2$get(verbose = TRUE)   # Use authentication # (res <- HttpClient$new( #   url = \"http://google.com\", #   proxies = proxy(\"http://97.77.104.22:3128\", user = \"foo\", pwd = \"bar\") # ))  # another example # (res <- HttpClient$new( #   url = \"http://ip.tyk.nu/\", #   proxies = proxy(\"http://200.29.191.149:3128\") # )) # res$get()$parse(\"UTF-8\") }"},{"path":"https://docs.ropensci.org/crul/reference/upload.html","id":null,"dir":"Reference","previous_headings":"","what":"upload file — upload","title":"upload file — upload","text":"upload file","code":""},{"path":"https://docs.ropensci.org/crul/reference/upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"upload file — upload","text":"","code":"upload(path, type = NULL)"},{"path":"https://docs.ropensci.org/crul/reference/upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"upload file — upload","text":"path (character) single path, file must exist type (character) file type, guessed mime::guess_type given","code":""},{"path":"https://docs.ropensci.org/crul/reference/upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"upload file — upload","text":"","code":"if (FALSE) { # image path <- file.path(Sys.getenv(\"R_DOC_DIR\"), \"html/logo.jpg\") (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) res <- x$post(path = \"post\", body = list(y = upload(path))) res$content  # text file, in a list file <- upload(system.file(\"CITATION\")) res <- x$post(path = \"post\", body = list(y = file)) jsonlite::fromJSON(res$parse(\"UTF-8\"))  # text file, as data res <- x$post(path = \"post\", body = file) jsonlite::fromJSON(res$parse(\"UTF-8\")) }"},{"path":"https://docs.ropensci.org/crul/reference/url_build.html","id":null,"dir":"Reference","previous_headings":"","what":"Build and parse URLs — url_build","title":"Build and parse URLs — url_build","text":"Build parse URLs","code":""},{"path":"https://docs.ropensci.org/crul/reference/url_build.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build and parse URLs — url_build","text":"","code":"url_build(url, path = NULL, query = NULL)  url_parse(url)"},{"path":"https://docs.ropensci.org/crul/reference/url_build.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build and parse URLs — url_build","text":"url (character) url, length 1 path (character) path, length 1 query (list) named list query parameters","code":""},{"path":"https://docs.ropensci.org/crul/reference/url_build.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build and parse URLs — url_build","text":"url_build returns character string URL; url_parse returns list URL components","code":""},{"path":"https://docs.ropensci.org/crul/reference/url_build.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build and parse URLs — url_build","text":"","code":"url_build(\"https://hb.opencpu.org\") #> [1] \"https://hb.opencpu.org/\" url_build(\"https://hb.opencpu.org\", \"get\") #> [1] \"https://hb.opencpu.org/get\" url_build(\"https://hb.opencpu.org\", \"post\") #> [1] \"https://hb.opencpu.org/post\" url_build(\"https://hb.opencpu.org\", \"get\", list(foo = \"bar\")) #> [1] \"https://hb.opencpu.org/get?foo=bar\"  url_parse(\"hb.opencpu.org\") #> $scheme #> [1] NA #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] NA #>  #> $parameter #> [1] NA #>  #> $fragment #> [1] NA #>  url_parse(\"https://hb.opencpu.org\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] NA #>  #> $parameter #> [1] NA #>  #> $fragment #> [1] NA #>  url_parse(url = \"https://hb.opencpu.org\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] NA #>  #> $parameter #> [1] NA #>  #> $fragment #> [1] NA #>  url_parse(\"https://hb.opencpu.org/get\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] \"get\" #>  #> $parameter #> [1] NA #>  #> $fragment #> [1] NA #>  url_parse(\"https://hb.opencpu.org/get?foo=bar\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] \"get\" #>  #> $parameter #> $parameter$foo #> [1] \"bar\" #>  #>  #> $fragment #> [1] NA #>  url_parse(\"https://hb.opencpu.org/get?foo=bar&stuff=things\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] \"get\" #>  #> $parameter #> $parameter$foo #> [1] \"bar\" #>  #> $parameter$stuff #> [1] \"things\" #>  #>  #> $fragment #> [1] NA #>  url_parse(\"https://hb.opencpu.org/get?foo=bar&stuff=things[]\") #> $scheme #> [1] \"https\" #>  #> $domain #> [1] \"hb.opencpu.org\" #>  #> $port #> [1] NA #>  #> $path #> [1] \"get\" #>  #> $parameter #> $parameter$foo #> [1] \"bar\" #>  #> $parameter$stuff #> [1] \"things[]\" #>  #>  #> $fragment #> [1] NA #>"},{"path":"https://docs.ropensci.org/crul/reference/verb-DELETE.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: DELETE — verb-DELETE","title":"HTTP verb info: DELETE — verb-DELETE","text":"DELETE method deletes specified resource.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-DELETE.html","id":"the-delete-method","dir":"Reference","previous_headings":"","what":"The DELETE method","title":"HTTP verb info: DELETE — verb-DELETE","text":"DELETE method requests origin server remove association target resource current functionality.  effect, method similar rm command UNIX: expresses deletion operation URI mapping origin server rather expectation previously associated information deleted.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-DELETE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: DELETE — verb-DELETE","text":"https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.5","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-DELETE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: DELETE — verb-DELETE","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$delete(path = 'delete')  ## a list (res1 <- x$delete('delete', body = list(hello = \"world\"), verbose = TRUE)) jsonlite::fromJSON(res1$parse(\"UTF-8\"))  ## a string (res2 <- x$delete('delete', body = \"hello world\", verbose = TRUE)) jsonlite::fromJSON(res2$parse(\"UTF-8\"))  ## empty body request x$delete('delete', verbose = TRUE) }"},{"path":"https://docs.ropensci.org/crul/reference/verb-GET.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: GET — verb-GET","title":"HTTP verb info: GET — verb-GET","text":"GET method requests representation specified resource. Requests using GET retrieve data.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-GET.html","id":"the-get-method","dir":"Reference","previous_headings":"","what":"The GET method","title":"HTTP verb info: GET — verb-GET","text":"GET method requests transfer current selected representation target resource.  GET primary mechanism information retrieval focus almost performance optimizations. Hence, people speak retrieving identifiable information via HTTP, generally referring making GET request. tempting think resource identifiers remote file system pathnames representations copy contents files.  fact, many resources implemented (see Section 9.1 (https://datatracker.ietf.org/doc/html/rfc7231#section-9.1) related security considerations).  However, limitations practice.  HTTP interface resource just likely implemented tree content objects, programmatic view various database records, gateway information systems.  Even URI mapping mechanism tied file system, origin server might configured execute files request input send output representation rather transfer files directly.  Regardless, origin server needs know resource identifiers corresponds implementation implementation manages select send current representation target resource response GET. client can alter semantics GET \"range request\", requesting transfer part(s) selected representation, sending Range header field request (RFC7233: https://datatracker.ietf.org/doc/html/rfc7233). payload within GET request message defined semantics; sending payload body GET request might cause existing implementations reject request. response GET request cacheable; cache MAY use satisfy subsequent GET HEAD requests unless otherwise indicated Cache-Control header field (Section 5.2 RFC7234: https://datatracker.ietf.org/doc/html/rfc7234#section-5.2).","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-GET.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: GET — verb-GET","text":"https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-GET.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: GET — verb-GET","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$get(path = 'get') }"},{"path":"https://docs.ropensci.org/crul/reference/verb-HEAD.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: HEAD — verb-HEAD","title":"HTTP verb info: HEAD — verb-HEAD","text":"HEAD method asks response identical GET request, without response body.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-HEAD.html","id":"the-head-method","dir":"Reference","previous_headings":"","what":"The HEAD method","title":"HTTP verb info: HEAD — verb-HEAD","text":"HEAD method identical GET except server MUST send message body response (.e., response terminates end header section).  server send header fields response HEAD request sent request GET, except payload header fields MAY omitted.  method can used obtaining metadata selected representation without transferring representation data often used testing hypertext links validity, accessibility, recent modification.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-HEAD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: HEAD — verb-HEAD","text":"https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.2","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-HEAD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: HEAD — verb-HEAD","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$head() }"},{"path":"https://docs.ropensci.org/crul/reference/verb-PATCH.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: PATCH — verb-PATCH","title":"HTTP verb info: PATCH — verb-PATCH","text":"PATCH method used apply partial modifications resource.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-PATCH.html","id":"the-patch-method","dir":"Reference","previous_headings":"","what":"The PATCH method","title":"HTTP verb info: PATCH — verb-PATCH","text":"PATCH method requests set changes described request entity applied resource identified Request- URI.  set changes represented format called \"patch document\" identified media type.  Request-URI point existing resource, server MAY create new resource, depending patch document type (whether can logically modify null resource) permissions, etc.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-PATCH.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: PATCH — verb-PATCH","text":"https://datatracker.ietf.org/doc/html/rfc5789","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-PATCH.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: PATCH — verb-PATCH","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$patch(path = 'patch', body = list(hello = \"mars\")) }"},{"path":"https://docs.ropensci.org/crul/reference/verb-POST.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: POST — verb-POST","title":"HTTP verb info: POST — verb-POST","text":"POST method used submit entity specified resource, often causing change state side effects server.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-POST.html","id":"the-post-method","dir":"Reference","previous_headings":"","what":"The POST method","title":"HTTP verb info: POST — verb-POST","text":"one resources created origin server result successfully processing POST request, origin server send 201 (Created) response containing Location header field provides identifier primary resource created (Section 7.1.2 https://datatracker.ietf.org/doc/html/rfc7231#section-7.1.2) representation describes status request referring new resource(s).","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-POST.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: POST — verb-POST","text":"https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.3","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-POST.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: POST — verb-POST","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\")  # a named list x$post(path='post', body = list(hello = \"world\"))  # a string x$post(path='post', body = \"hello world\")  # an empty body request x$post(path='post')  # encode=\"form\" res <- x$post(path=\"post\",   encode = \"form\",   body = list(     custname = 'Jane',     custtel = '444-4444',     size = 'small',     topping = 'bacon',     comments = 'make it snappy'   ) ) jsonlite::fromJSON(res$parse(\"UTF-8\"))  # encode=\"json\" res <- x$post(\"post\",   encode = \"json\",   body = list(     genus = 'Gagea',     species = 'pratensis'   ) ) jsonlite::fromJSON(res$parse()) }"},{"path":"https://docs.ropensci.org/crul/reference/verb-PUT.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP verb info: PUT — verb-PUT","title":"HTTP verb info: PUT — verb-PUT","text":"PUT method replaces current representations target resource request payload.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-PUT.html","id":"the-put-method","dir":"Reference","previous_headings":"","what":"The PUT method","title":"HTTP verb info: PUT — verb-PUT","text":"PUT method requests state target resource created replaced state defined representation enclosed request message payload.  successful PUT given representation suggest subsequent GET target resource result equivalent representation sent 200 (OK) response. However, guarantee state change observable, since target resource might acted upon user agents parallel, might subject dynamic processing origin server, subsequent GET received.  successful response implies user agent's intent achieved time processing origin server. target resource current representation PUT successfully creates one, origin server MUST inform user agent sending 201 (Created) response.  target resource current representation representation successfully modified accordance state enclosed representation, origin server MUST send either 200 (OK) 204 (Content) response indicate successful completion request.","code":""},{"path":"https://docs.ropensci.org/crul/reference/verb-PUT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HTTP verb info: PUT — verb-PUT","text":"https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.4","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/reference/verb-PUT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP verb info: PUT — verb-PUT","text":"","code":"if (FALSE) { x <- HttpClient$new(url = \"https://hb.opencpu.org\") x$put(path = 'put', body = list(foo = \"bar\")) }"},{"path":"https://docs.ropensci.org/crul/reference/writing-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Writing data options — writing-options","title":"Writing data options — writing-options","text":"Writing data options","code":""},{"path":"https://docs.ropensci.org/crul/reference/writing-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Writing data options — writing-options","text":"","code":"if (FALSE) { # write to disk (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) f <- tempfile() res <- x$get(\"get\", disk = f) res$content # when using write to disk, content is a path readLines(res$content) close(file(f))  # streaming response (x <- HttpClient$new(url = \"https://hb.opencpu.org\")) res <- x$get('stream/50', stream = function(x) cat(rawToChar(x))) res$content # when streaming, content is NULL   ## Async (cc <- Async$new(   urls = c(     'https://hb.opencpu.org/get?a=5',     'https://hb.opencpu.org/get?foo=bar',     'https://hb.opencpu.org/get?b=4',     'https://hb.opencpu.org/get?stuff=things',     'https://hb.opencpu.org/get?b=4&g=7&u=9&z=1'   ) )) files <- replicate(5, tempfile()) (res <- cc$get(disk = files, verbose = TRUE)) lapply(files, readLines)  ## Async varied ### disk f <- tempfile() g <- tempfile() req1 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get(disk = f) req2 <- HttpRequest$new(url = \"https://hb.opencpu.org/post\")$post(disk = g) req3 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\")$get() (out <- AsyncVaried$new(req1, req2, req3)) out$request() out$content() readLines(f) readLines(g) out$parse() close(file(f)) close(file(g))  ### stream - to console fun <- function(x) print(x) req1 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\" )$get(query = list(foo = \"bar\"), stream = fun) req2 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\" )$get(query = list(hello = \"world\"), stream = fun) (out <- AsyncVaried$new(req1, req2)) out$request() out$content()  ### stream - to an R object lst <- list() fun <- function(x) lst <<- append(lst, list(x)) req1 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\" )$get(query = list(foo = \"bar\"), stream = fun) req2 <- HttpRequest$new(url = \"https://hb.opencpu.org/get\" )$get(query = list(hello = \"world\"), stream = fun) (out <- AsyncVaried$new(req1, req2)) out$request() lst cat(vapply(lst, function(z) rawToChar(z$content), \"\"), sep = \"\\n\") }"},{"path":[]},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"async-retries-1-4","dir":"Changelog","previous_headings":"","what":"ASYNC RETRIES","title":"crul 1.4","text":"Via two issues (#135) (#159) crul now supports http retries : Async, AsyncVaried, AsyncQueue, request builder class HttpRequest","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-13","dir":"Changelog","previous_headings":"","what":"crul 1.3","title":"crul 1.3","text":"CRAN release: 2022-09-03","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-1-3","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 1.3","text":"improved error message Async urls disk vector lengths match (must match) (#165) thanks @shakraz","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"documentation-1-2","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION","title":"crul 1.2","text":"fix example AsyncQueue docs (#146) thanks @johnbaums ! update HttpClient docs state ’s R6 class, give details R6 class links info (#155)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-1-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 1.2","text":"AsyncQueue gains methods: parse, status_code, status, content, times (#156) $responses() method now returns S3 class associated print method prevent printing lot results screen; print method pritns summary results, 10 results, just status code url (#157)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-1-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 1.2","text":"parsing response headers gains check whether encoding valid, tries set Latin1 encoding, doesn’t work, fails message (#163) (#164) thanks @FlukeAndFeather","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-1-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 1.1","text":"Paginator gains support query parameter combination page/per_page automatically paginate (#145)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-1-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 1.1","text":"fix typo (#149) thanks @dpprdan Change numbers handled query parameters. unfortunately hadn’t tested package large numbers, converted scientific notation certain number digits decimal. Fixed handling query parameters avoid problem. Fix Paginator well HttpClient (#151) (#152) (#153) thanks @ateucher","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 1.1","text":"sometimes weird response headers returned HTTP response can easily parsed; crul raise error header parsing happens, now raise warning instead (#150)","code":""},{"path":[]},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"ok-related-changes-1-0","dir":"Changelog","previous_headings":"","what":"ok related changes","title":"crul 1.0","text":"ok() can now accept 1 status code can check status url within set status codes rather equal 1 status code (#124) ok() gains parameter verb use either head get requests. addition added documentation (#125) function get “right answer” whether url ok/(#123) (#127) ok() gains parameter ua_random, TRUE, use random user agent string pulled vector 50 user agent strings generated charlatan::UserAgentProvider (#138)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 1.0","text":"gains new async class AsyncQueue async requests rate limits (#139) gains new functions curl_verbose() set_verbose(). curl_verbose() can set passing initialize step (e.g., HttpClient$new(url, verbose=curl_verbose())), gets compact verbose curl output, also getting request body information (response body optionally). set_verbose() sets curl_verbose() globally (#141) gains new vignette “choose client” choosing crul class use (e.g., HttpClient vs. Async) (#133) (#143)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 1.0","text":"package sticker done, shown README (#42) improve function/class reference page docs site (#131) improvements best practices vignette (#132) removed unused private variable AsyncVaried class (#140) fix inaccuracy documentation RETRY method (#130) HttpRequest now adds query (present) printed url print method class (absent now) (#128) use new roxygen2 support R6 classes (#126) removed delete-requests post-requests manual files - mostly redundant documentation","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-090","dir":"Changelog","previous_headings":"","what":"crul 0.9.0","title":"crul 0.9.0","text":"CRAN release: 2019-11-06","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.9.0","text":"HttpResponse response object gains new methods checking response content types, includes: raise_for_ct, raise_for_ct_html, raise_for_ct_json, raise_for_ct_xml. behave similarly raise_for_status, can behave warning raise error stop (#119) (#120)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.9.0","text":"fix prep_body internal function handle various body inputs; now avoids warning .character.form_file httr crul loaded (#112) finish “Failing fauxpas” section “API package best practices” vignette (#121)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.9.0","text":"head() verb HttpClient capturing auth set initialization (#122)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-084","dir":"Changelog","previous_headings":"","what":"crul 0.8.4","title":"crul 0.8.4","text":"CRAN release: 2019-08-02","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-8-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.8.4","text":"jsonlite package moved Imports (#112) parse() method HttpResponse object now checks whether response raw bytes can converted character, just returns raw bytes (#115) (#116) give vignettes titles (#113) (#114)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-8-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.8.4","text":"longer setting cainfo curl option, fixes problem arising change recent libcurl version (#117)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-080","dir":"Changelog","previous_headings":"","what":"crul 0.8.0","title":"crul 0.8.0","text":"CRAN release: 2019-06-28","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-8-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.8.0","text":"can now pass parameters parse() method HttpResponse class internally called function iconv() finely control usage iconv cases normal encoding conversion doesn’t work (#110)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.8.0","text":"use httpcode package instead fauxpas package within ok() function (#108) (#109) thanks @maelle ! fix links http testing book - ropensci -> ropenscilabs (#111)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-074","dir":"Changelog","previous_headings":"","what":"crul 0.7.4","title":"crul 0.7.4","text":"CRAN release: 2019-03-28","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-7-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.7.4","text":"event hooks added HttpClient. request response hooks supported. supported async methods now (#76) (#107)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-7-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.7.4","text":"improve $parse() behavior (HttpResponse object) using disk stream. $parse() throwing warning using disk error using stream. improves behavior async requests (#104) Paginator gains optional progress bar new progress parameter. addition, cat() calls inside method removed, insert newlines page print “OK” done (#106) thanks @boshek","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-7-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.7.4","text":"passing opts/headers now works Async (#101) (#103) streaming broken AsyncVaried curl certain version, works now (#102) (#103)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-070","dir":"Changelog","previous_headings":"","what":"crul 0.7.0","title":"crul 0.7.0","text":"CRAN release: 2019-01-04","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.7.0","text":"HttpClient gains retry method: retries request verb successful (HTTP response status < 400) condition giving met. (#89) (#95) thanks @hlapp HttpClient, HttpRequest, Async classes gain verb method HTTP requests specifying supported HTTP verbs (#97) HttpClient Paginator gain url_fetch method: get URL sent HTTP request without sending HTTP request. Useful getting URL executing HTTP request need check something URL first. (#92) new vignette “API package best practices” (#65) Package gains manual files HTTP verb facilitate linking package documentation information HTTP verb (#98) Intermediate headers (e.g., redirect chains) now given back new slot HttpResponse class $response_headers_all unnamed list, element named list headers; last list set final response headers match given $response_headers slot (#60) (#99)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.7.0","text":"dangling file connections left open - now fixed (#93) (#95) fix url_parse: lacked check input string, length 1 - PR fixed (#100) thanks @aaronwolen","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"defunct-0-7-0","dir":"Changelog","previous_headings":"","what":"DEFUNCT","title":"crul 0.7.0","text":"HttpStubbedResponse removed package - may used point, used package anymore (#88)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-060","dir":"Changelog","previous_headings":"","what":"crul 0.6.0","title":"crul 0.6.0","text":"CRAN release: 2018-07-10","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.6.0","text":"Async AsyncVaried now support simple auth, see ?auth (#70) gains new function ok() ping URL see ’s , returns single boolean (#71) (#73) HttpClient HttpRequest gain new parameter progress accepts function use construct progress bar. now accepts httr::progress() accept options future (#20) (#81) gains new vignette curl options (#7) can now set curl options globally using new functions set_auth(), set_headers(), set_opts(), set_proxy(), crul_settings() (#48) (#85)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-6-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.6.0","text":"explicitly import httpcode::http_code (#80) fix vignette names make clear add numbers order (#64) change print function Async AsyncVaried print max 10 tell user many total remaining shown (#72) added support proxy() socks, e.g. use TOR (#79) now Async AsyncVaried requests fail, don’t error instead capture error pass back result. way failure requests don’t stop progress entire async request suite (#74) (#84)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-052","dir":"Changelog","previous_headings":"","what":"crul 0.5.2","title":"crul 0.5.2","text":"CRAN release: 2018-02-24","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-5-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.5.2","text":"Fixed handling user agent: can pass UA string curl option header. Previously, wrongly overwriting user input UA given curl option - given header. fixed now. (#63) thx @maelle @dpprdan","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.5.2","text":"Fix Paginator - wasn’t handling pagination correctly. addition, fixed hopefully handle scenarios now. added tests (#62) Fixed handling query parameters. using urltools::url_encode encode strings, wasn’t encoding correctly locales. Using curl::curl_escape fixes problem. Encoding done query values names (#67) (#68)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-050","dir":"Changelog","previous_headings":"","what":"crul 0.5.0","title":"crul 0.5.0","text":"CRAN release: 2018-01-22","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.5.0","text":"Gains new R6 class Paginator help users automatically paginate multiple requests. supports query parameter based paginating now. ’ll add support later types including cursors (e.g., used Solr servers), link headers (e.g., used GitHub API). Please get touch find problems Paginator. (#56) Async classes Async Asyncvaried gain ability write disk stream data (disk elsewhere, e.g. R console R object) (#46) thanks @artemklevtsov push ","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.5.0","text":"Improved documentation auth indicate user pwd indeed required - indicate one can pass NULL parameters (similar empty string \"\" httr::authenticate) one e.g. may want use gssnegotiate method (#43) Fixed query builder one can now protect query parameters wrapping () (#55)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.5.0","text":"Fixed bug head requests HttpClient passing query parameter - failing previously. Added query parameter back. (#52)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-040","dir":"Changelog","previous_headings":"","what":"crul 0.4.0","title":"crul 0.4.0","text":"CRAN release: 2017-10-02","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.4.0","text":"file uploads now work, see new function upload() examples (#25)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.4.0","text":"fixes reused curl handles - within connection object , across connection objects (#45) crul now drops options passed opts ... set allowed curl options, see curl::curl_options() (#49) cookies now persisted across requests within connection object, see new doc ?cookies set cookies (#44) gather cainfo use curl options applicable (#51) remove disk stream head method HttpClient HttpRequest body returned HEAD request","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-038","dir":"Changelog","previous_headings":"","what":"crul 0.3.8","title":"crul 0.3.8","text":"CRAN release: 2017-06-14","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-3-8","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.3.8","text":"Fixed AsyncVaried return async responses order passed . also fixes exact behavior Async Async uses AsyncVaried internally. (#41) thanks @dirkschumacher reporting","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-036","dir":"Changelog","previous_headings":"","what":"crul 0.3.6","title":"crul 0.3.6","text":"CRAN release: 2017-05-23 Note: version gains support integration webmockr, now CRAN.","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-3-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.3.6","text":"New function auth() simple authentication (#33) New function HttpStubbedResponse making stubbed response object webmockr integration (#4) New function mock() turn mocking - ’s default. webmockr installed user attempts use mocking error message install webmockr (#4)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-3-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.3.6","text":"Use gzip-deflate deafult request make sure gzip compression used server can (#34) Change useragent User-Agent default user agent header (#35) Now make sure user supplied headers override default headers name (#36)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-034","dir":"Changelog","previous_headings":"","what":"crul 0.3.4","title":"crul 0.3.4","text":"CRAN release: 2017-03-31","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-3-4","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.3.4","text":"New utility functions url_build url_parse (#31)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-3-4","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.3.4","text":"Now using markdown documentation (#32) Better documentation AsyncVaried (#30) New vignette use crul realistic scenarios rather brief examples demonstrate individual features (#29) Better documentation HttpRequest (#28) Included tests","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-3-4","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.3.4","text":"Fixed put/patch/delete weren’t passing body correctly HttpClient (#26) DRY code preparing requests - simplify use helper functions (#27)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-030","dir":"Changelog","previous_headings":"","what":"crul 0.3.0","title":"crul 0.3.0","text":"CRAN release: 2017-02-17","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-3-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.3.0","text":"Added support asynchronous HTTP requests, including two new R6 classes: Async AsyncVaried. former simpler interface treating URLs options/HTTP method, latter allowing type request new R6 class HttpRequest (#8) (#24) New R6 class HttpRequest support AsyncVaried - method defines request, execute . (#8)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.3.0","text":"Added support proxies (#22)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.3.0","text":"Fixed parsing headers FTP servers (#21)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-020","dir":"Changelog","previous_headings":"","what":"crul 0.2.0","title":"crul 0.2.0","text":"CRAN release: 2017-01-03","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.2.0","text":"Created new manual files various tasks document usage better (#19) URL encode paths - fix bugs spaces words caused errors previously (#17) URL encode query parameters - fix bugs spaces words caused errors previously (#11) request headers now passed correctly response object (#13) response headers now parsed list easier access (#14) Now supporting multiple query parameters name, wasn’t possible last version (#15)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-016","dir":"Changelog","previous_headings":"","what":"crul 0.1.6","title":"crul 0.1.6","text":"CRAN release: 2016-12-17","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.1.6","text":"Improved options using curl options. Can manually add list curl options pass via .... check user doesn’t pass prohibited options (curl package takes care checking options valid) (#5) Incorporated fauxpas package dealing HTTP conditions. ’s Suggest, used installed (#6) Added support streaming via curl::curl_fetch_stream. stream param defaults NULL (thus ignored), pass function use streaming. one memory, streaming disk allowed. (#9) Added support streaming via curl::curl_fetch_disk. disk param defaults NULL (thus ignored), pass path write disk instead use memory. one memory, streaming disk allowed. (#12)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"minor-improvements-0-1-6","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"crul 0.1.6","text":"Added missing raise_for_status() method HttpResponse class (#10)","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"bug-fixes-0-1-6","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"crul 0.1.6","text":"importing httpcode wasn’t using package. Now using package HttpResponse","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"crul-010","dir":"Changelog","previous_headings":"","what":"crul 0.1.0","title":"crul 0.1.0","text":"CRAN release: 2016-11-09","code":""},{"path":"https://docs.ropensci.org/crul/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"crul 0.1.0","text":"Released CRAN.","code":""}]
